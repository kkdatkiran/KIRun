{"version":3,"sources":["../../src/functions/util.js"],"names":["makeFunction","signature","func","execute","inArguments","schemaRepository","functionRepository","i","args","size","argumentIndex","reduce","a","c","name","push","parameters","forEach","e","argList","isVariableArgument","length","schema","value"],"mappings":";;;;;;;;;AAAA;;AAEO,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,IAAjC,EAAuC;AAC5C,SAAO;AACLD,IAAAA,SAAS,EAATA,SADK;AAELE,IAAAA,OAAO,EAAE,iBAACC,WAAD,EAAcC,gBAAd,EAAgCC,kBAAhC,EAAuD;AAC9D,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,IAAL,EAApB,EAAiCF,CAAC,EAAlC,EAAsC;AACpCH,QAAAA,WAAW,CAACG,CAAD,CAAX,CAAeG,aAAf,GAA+BH,CAA/B;AACD;;AAEDH,MAAAA,WAAW,CAACO,MAAZ,CAAmB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC3B,YAAI,CAACD,CAAC,CAACC,CAAC,CAACC,IAAH,CAAN,EAAgBF,CAAC,CAACC,CAAC,CAACC,IAAH,CAAD,GAAY,EAAZ;AAChBF,QAAAA,CAAC,CAACC,CAAC,CAACC,IAAH,CAAD,CAAUC,IAAV,CAAeF,CAAf;AACA,eAAOD,CAAP;AACD,OAJD,EAIG,EAJH;AAMA,UAAMJ,IAAI,GAAG,EAAb;AAEAP,MAAAA,SAAS,CAACe,UAAV,CAAqBC,OAArB,CAA6B,UAACC,CAAD,EAAO;AAClC,YAAMC,OAAO,GAAGX,IAAI,CAACU,CAAC,CAACJ,IAAH,CAApB;AACA,YAAI,CAACI,CAAC,CAACE,kBAAH,KAA0BD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACE,MAAR,KAAmB,CAAjE,CAAJ,EAAyE,+CAAwCH,CAAC,CAACJ,IAA1C;AACzE,YAAIK,OAAJ,EAAaA,OAAO,CAACF,OAAR,CAAgB,UAACL,CAAD;AAAA,iBAAO,2BAAS,IAAT,EAAeM,CAAC,CAACI,MAAjB,EAAyBjB,gBAAzB,EAA2CC,kBAA3C,EAA+DM,CAAC,CAACW,KAAjE,CAAP;AAAA,SAAhB;AACd,OAJD;AAKA,aAAOrB,IAAI,CAACM,IAAD,EAAOH,gBAAP,EAAyBC,kBAAzB,CAAX;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import validate from \"../schemas/validator\";\n\nexport function makeFunction(signature, func) {\n  return {\n    signature,\n    execute: (inArguments, schemaRepository, functionRepository) => {\n      for (let i = 0; i < args.size(); i++) {\n        inArguments[i].argumentIndex = i;\n      }\n\n      inArguments.reduce((a, c) => {\n        if (!a[c.name]) a[c.name] = [];\n        a[c.name].push(c);\n        return a;\n      }, {});\n\n      const args = {};\n\n      signature.parameters.forEach((e) => {\n        const argList = args[e.name];\n        if (!e.isVariableArgument && (argList === null || argList.length !== 1)) throw `Expects one argument with name ${e.name}`;\n        if (argList) argList.forEach((a) => validate(null, e.schema, schemaRepository, functionRepository, a.value));\n      });\n      return func(args, schemaRepository, functionRepository);\n    },\n  };\n}\n"],"file":"util.js"}