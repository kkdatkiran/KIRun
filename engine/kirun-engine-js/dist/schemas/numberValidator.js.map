{"version":3,"sources":["../../src/schemas/numberValidator.js"],"names":["numberValidator","type","parents","schema","schemaRepository","functionRepository","element","validate","title","checkRange","checkMultipleOf","msg","undefined","SchemaType","INTEGER","LONG","v","parseInt","minimum","maximum","exclusiveMinimum","exclusiveMaximum","multipleOf","x"],"mappings":";;;;;;;AAAA;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,gBAAhD,EAAkEC,kBAAlE,EAAsFC,OAAtF,EAA+FC,QAA/F,EAAyG;AACtH,MAAI,CAACD,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C,gBAAS,qBAAKJ,OAAL,EAAcC,MAAM,CAACK,KAArB,CAAT,qCAA+DF,OAA/D;AAE7CG,EAAAA,UAAU,CAACR,IAAD,EAAOC,OAAP,EAAgBC,MAAhB,EAAwBG,OAAxB,CAAV;AACAI,EAAAA,eAAe,CAACR,OAAD,EAAUC,MAAV,EAAkBG,OAAlB,CAAf;AACD;;AAED,SAASG,UAAT,CAAoBR,IAApB,EAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CG,OAA3C,EAAoD;AAClD,MAAIK,GAAG,GAAGC,SAAV;;AAEA,MAAIX,IAAI,KAAKY,sBAAWC,OAApB,IAA+Bb,IAAI,KAAKY,sBAAWE,IAAvD,EAA6D;AAC3D,QAAIC,CAAC,GAAGC,QAAQ,CAACX,OAAD,CAAhB;AACA,QAAIU,CAAC,KAAKV,OAAV,EAAmB,gBAAS,qBAAKJ,OAAL,EAAcC,MAAM,CAACK,KAArB,CAAT,oBAA8CF,OAA9C,6BAAwEL,IAAxE;AACpB;;AAED,MAAIE,MAAM,CAACe,OAAP,IAAkBf,MAAM,CAACe,OAAP,GAAiBZ,OAAvC,EAAgDK,GAAG,iDAA0CR,MAAM,CAACe,OAAjD,CAAH;AAChD,MAAIf,MAAM,CAACgB,OAAP,IAAkBhB,MAAM,CAACgB,OAAP,GAAiBb,OAAvC,EAAgDK,GAAG,8CAAuCR,MAAM,CAACgB,OAA9C,CAAH;AAChD,MAAIhB,MAAM,CAACiB,gBAAP,IAA2BjB,MAAM,CAACiB,gBAAP,IAA2Bd,OAA1D,EAAmEK,GAAG,qCAA8BR,MAAM,CAACiB,gBAArC,CAAH;AACnE,MAAIjB,MAAM,CAACkB,gBAAP,IAA2BlB,MAAM,CAACkB,gBAAP,IAA2Bf,OAA1D,EAAmEK,GAAG,kCAA2BR,MAAM,CAACkB,gBAAlC,CAAH;AAEnE,MAAI,CAACV,GAAL,EAAU;AAEV,mBAAU,qBAAKT,OAAL,EAAcC,MAAM,CAACK,KAArB,CAAV,SAAwCF,OAAxC,SAAkDK,GAAlD;AACD;;AAED,SAASD,eAAT,CAAyBR,OAAzB,EAAkCC,MAAlC,EAA0CG,OAA1C,EAAmD;AACjD,MAAI,CAACH,MAAM,CAACmB,UAAZ,EAAwB;AAExB,MAAIC,CAAC,GAAGjB,OAAO,GAAGH,MAAM,CAACmB,UAAzB;AACA,MAAIC,CAAC,KAAK,CAAV,EAAa,gBAAS,qBAAKrB,OAAL,EAAcC,MAAM,CAACK,KAArB,CAAT,SAAuCF,OAAvC,mCAAuEH,MAAM,CAACmB,UAA9E;AACd","sourcesContent":["import { SchemaType, path } from \"./constants\";\n\nexport default function numberValidator(type, parents, schema, schemaRepository, functionRepository, element, validate) {\n  if (!element || typeof element !== \"number\") throw `${path(parents, schema.title)}Expected a number found ${element}`;\n\n  checkRange(type, parents, schema, element);\n  checkMultipleOf(parents, schema, element);\n}\n\nfunction checkRange(type, parents, schema, element) {\n  let msg = undefined;\n\n  if (type === SchemaType.INTEGER || type === SchemaType.LONG) {\n    let v = parseInt(element);\n    if (v !== element) throw `${path(parents, schema.title)}Number ${element} is not of type ${type}`;\n  }\n\n  if (schema.minimum && schema.minimum > element) msg = ` should be greater than or equal to ${schema.minimum}`;\n  if (schema.maximum && schema.maximum < element) msg = ` should be less than or equal to ${schema.maximum}`;\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum >= element) msg = ` should be greater than ${schema.exclusiveMinimum}`;\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum <= element) msg = ` should be less than ${schema.exclusiveMaximum}`;\n\n  if (!msg) return;\n\n  return `${path(parents, schema.title)}${element}${msg}`;\n}\n\nfunction checkMultipleOf(parents, schema, element) {\n  if (!schema.multipleOf) return;\n\n  let x = element % schema.multipleOf;\n  if (x !== 0) throw `${path(parents, schema.title)}${element} is not a multiple of ${schema.multipleOf}`;\n}\n"],"file":"numberValidator.js"}