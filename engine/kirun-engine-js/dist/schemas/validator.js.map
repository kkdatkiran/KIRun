{"version":3,"sources":["../../src/schemas/validator.js"],"names":["validate","parents","schema","schemaRepository","functionRepository","element","find","defaultValue","constant","enums","enumCheck","type","oneOf","allOf","anyOf","not","flag","error","path","title"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEe,SAASA,QAAT,CAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,gBAAnC,EAAqDC,kBAArD,EAAyEC,OAAzE,EAAkF;AAC/F,MAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAI,CAACC,gBAAL,EAAuB,mCAA4BD,MAA5B;AACvBA,IAAAA,MAAM,GAAGC,gBAAgB,CAACG,IAAjB,CAAsBJ,MAAtB,CAAT;AACD;;AAED,MAAI,CAACA,MAAL,EAAa,OAAOG,OAAP;AAEb,MAAI,CAACA,OAAD,IAAYH,MAAM,CAACK,YAAvB,EAAqC,OAAOL,MAAM,CAACK,YAAd;AAErC,MAAIL,MAAM,CAACM,QAAX,EAAqB,OAAON,MAAM,CAACM,QAAd;;AAErB,MAAIN,MAAM,CAACO,KAAX,EAAkB;AAChB,WAAOC,SAAS,CAACT,OAAD,EAAUC,MAAV,EAAkBC,gBAAlB,EAAoCC,kBAApC,EAAwDC,OAAxD,EAAiEL,QAAjE,CAAhB;AACD;;AAED,MAAIE,MAAM,CAACS,IAAX,EAAiB;AACf,mCAAcV,OAAd,EAAuBC,MAAvB,EAA+BC,gBAA/B,EAAiDC,kBAAjD,EAAqEC,OAArE,EAA8EL,QAA9E;AACD;;AAED,MAAIE,MAAM,CAACU,KAAP,IAAgBV,MAAM,CAACW,KAAvB,IAAgCX,MAAM,CAACY,KAA3C,EAAkD;AAChD,0CAAqBb,OAArB,EAA8BC,MAA9B,EAAsCC,gBAAtC,EAAwDC,kBAAxD,EAA4EC,OAA5E,EAAqFL,QAArF;AACD;;AAED,MAAIE,MAAM,CAACa,GAAX,EAAgB;AACd,QAAIC,IAAI,GAAG,KAAX;;AACA,QAAI;AACFhB,MAAAA,QAAQ,CAACC,OAAD,EAAUC,MAAM,CAACa,GAAjB,EAAsBZ,gBAAtB,EAAwCC,kBAAxC,EAA4DC,OAA5D,CAAR;AACAW,MAAAA,IAAI,GAAG,IAAP;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdD,MAAAA,IAAI,GAAG,KAAP;AACD;;AACD,QAAIA,IAAJ,EAAU,gBAASE,IAAI,CAACjB,OAAD,EAAUC,MAAM,CAACiB,KAAjB,CAAb;AACX;;AAED,SAAOd,OAAP;AACD","sourcesContent":["import anyAllOneOfvalidator from \"./anyAllOneOfvalidator\";\nimport typeValidator from \"./typeValidator\";\n\nexport default function validate(parents, schema, schemaRepository, functionRepository, element) {\n  if (typeof schema === \"string\") {\n    if (!schemaRepository) throw `Unable to find the ${schema} as schema repository not supplied.`;\n    schema = schemaRepository.find(schema);\n  }\n\n  if (!schema) return element;\n\n  if (!element && schema.defaultValue) return schema.defaultValue;\n\n  if (schema.constant) return schema.constant;\n\n  if (schema.enums) {\n    return enumCheck(parents, schema, schemaRepository, functionRepository, element, validate);\n  }\n\n  if (schema.type) {\n    typeValidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  }\n\n  if (schema.oneOf || schema.allOf || schema.anyOf) {\n    anyAllOneOfvalidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  }\n\n  if (schema.not) {\n    let flag = false;\n    try {\n      validate(parents, schema.not, schemaRepository, functionRepository, element);\n      flag = true;\n    } catch (error) {\n      flag = false;\n    }\n    if (flag) throw `${path(parents, schema.title)}Schema validated value in not condition.`;\n  }\n\n  return element;\n}\n"],"file":"validator.js"}