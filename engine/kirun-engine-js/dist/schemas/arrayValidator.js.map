{"version":3,"sources":["../../src/schemas/arrayValidator.js"],"names":["arrayValidator","parents","schema","schemaRepository","functionRepository","element","validate","Array","isArray","title","JSON","stringify","checkMinMaxItems","checkItems","checkUniqueItems","checkContains","array","contains","flag","i","length","newParents","push","err","uniqueItems","j","minItems","maxItems","items","singleSchema","tupleSchema"],"mappings":"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","sourcesContent":["import { deepEqual } from \"../util/deepEqual\";\nimport { path } from \"./constants\";\n\nexport default function arrayValidator(parents, schema, schemaRepository, functionRepository, element, validate) {\n  if (!Array.isArray(element)) throw `${path(parents, schema.title)}${JSON.stringify(element)} is not an Array`;\n\n  checkMinMaxItems(parents, schema, element);\n  checkItems(parents, schema, schemaRepository, functionRepository, element, validate);\n  checkUniqueItems(parents, schema, element);\n  checkContains(parents, schema, schemaRepository, functionRepository, element, validate);\n}\n\nfunction checkContains(parents, schema, schemaRepository, functionRepository, array, validate) {\n  if (!schema.contains) return;\n\n  let flag = false;\n  for (let i = 0; i < array.length; i++) {\n    const newParents = [...(parents ?? [])];\n    newParents.push(\"\" + i);\n    try {\n      validate(newParents, schema.contains, schemaRepository, functionRepository, array[i]);\n      flag = true;\n      break;\n    } catch (err) {\n      flag = false;\n    }\n  }\n\n  if (!flag) throw `${path(parents, schema.title)}None of the items are of type contains schema`;\n}\n\nfunction checkUniqueItems(parents, schema, array) {\n  if (!schema.uniqueItems) return;\n\n  for (let i = 0; i < array.length; i++) for (let j = i + 1; j < array.length; j++) if (deepEqual(array[i], array[j])) throw `${path(parents, schema.title)}Items on the array are not unique`;\n}\n\nfunction checkMinMaxItems(parents, schema, array) {\n  if (schema.minItems && schema.minItems > array.length) throw `${path(parents, schema.title)}Array should have minimum of ${schema.minItems} elements`;\n\n  if (schema.maxItems && schema.maxItems < array.length) throw `${path(parents, schema.title)}Array can have maximum of ${schema.maxItems} elements`;\n}\n\nfunction checkItems(parents, schema, schemaRepository, functionRepository, array, validate) {\n  if (!schema.items) return;\n  if (schema.items.singleSchema) {\n    for (let i = 0; i < array.length; i++) {\n      let newParents = [...(parents ?? []), \"\" + i];\n      array[i] = validate(newParents, schema.items.singleSchema, schemaRepository, functionRepository, array[i]);\n    }\n  }\n\n  if (schema.items.tupleSchema) {\n    if (schema.items.tupleSchema.length !== array.length) throw `${path(parents, schema.title)}Expected an array with only ${schema.items.tupleSchema.length} but found ${array.length}`;\n\n    for (let i = 0; i < array.length; i++) {\n      let newParents = [...(parents ?? []), \"\" + i];\n      array[i] = validate(newParents, schema.items.tupleSchema[i], schemaRepository, functionRepository, array);\n    }\n  }\n}\n"],"file":"arrayValidator.js"}