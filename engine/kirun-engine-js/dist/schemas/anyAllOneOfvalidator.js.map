{"version":3,"sources":["../../src/schemas/anyAllOneOfvalidator.js"],"names":["anyAllOneOfvalidator","parents","schema","schemaRepository","functionRepository","element","validate","list","oneOf","length","allOf","anyOf","flag","s","err","add","title"],"mappings":"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","sourcesContent":["import { path } from \"./constants\";\n\nexport default function anyAllOneOfvalidator(parents, schema, schemaRepository, functionRepository, element, validate) {\n  let list = [];\n\n  if (schema.oneOf?.length) oneOf(parents, schema, schemaRepository, functionRepository, element, list, validate);\n  else if (schema.allOf?.length) allOf(parents, schema, schemaRepository, functionRepository, element, list, validate);\n  else if (schema.anyOf?.length) anyOf(parents, schema, schemaRepository, functionRepository, element, list, validate);\n\n  return element;\n}\n\nfunction anyOf(parents, schema, schemaRepository, functionRepository, element, list, validate) {\n  let flag = false;\n  for (let s of schema.anyOf) {\n    try {\n      validate(parents, s, schemaRepository, functionRepository, element);\n      flag = true;\n      break;\n    } catch (err) {\n      flag = false;\n      list.add(err);\n    }\n  }\n\n  if (!flag) {\n    throw [`${path(parents, schema.title)}The value don't satisfy any of the schemas.`, ...list];\n  }\n}\n\nfunction allOf(parents, schema, schemaRepository, functionRepository, element, list, validate) {\n  let flag = 0;\n  for (let s of schema.allOf) {\n    try {\n      validate(parents, s, schemaRepository, functionRepository, element);\n      flag++;\n    } catch (err) {\n      list.add(err);\n    }\n  }\n\n  if (flag !== schema.allOf.length) {\n    throw [`${path(parents, schema.title)}The value doesn't satisfy some of the schemas.`, ...list];\n  }\n}\n\nfunction oneOf(parents, schema, schemaRepository, functionRepository, element, list, validate) {\n  let flag = 0;\n  for (let s of schema.oneOf) {\n    try {\n      validate(parents, s, schemaRepository, functionRepository, element);\n      flag++;\n    } catch (err) {\n      list.add(err);\n    }\n  }\n\n  if (flag === 0) throw [`${path(parents, schema.title)}The value does not satisfy any schema.`, ...list];\n  if (flag !== 1) throw [`${path(parents, schema.title)}The value satisfy more than one schema.`, ...list];\n}\n"],"file":"anyAllOneOfvalidator.js"}