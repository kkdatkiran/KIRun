{"version":3,"sources":["../../src/schemas/typeValidator.js"],"names":["typeValidator","parents","schema","schemaRepository","functionRepository","element","validate","valid","list","types","Array","isArray","type","typeValidation","err","push","title","SchemaType","STRING","LONG","INTEGER","DOUBLE","FLOAT","BOOLEAN","OBJECT","ARRAY","NULL"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,SAASA,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwCC,gBAAxC,EAA0DC,kBAA1D,EAA8EC,OAA9E,EAAuFC,QAAvF,EAAiG;AAC9G,MAAIC,KAAK,GAAG,KAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;AAEA,MAAIC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcT,MAAM,CAACU,IAArB,IAA6BV,MAAM,CAACU,IAApC,GAA2C,CAACV,MAAM,CAACU,IAAR,CAAvD;;AAJ8G,6CAM7FH,KAN6F;AAAA;;AAAA;AAM9G,wDAAwB;AAAA,UAAfG,IAAe;;AACtB,UAAI;AACFC,QAAAA,cAAc,CAACZ,OAAD,EAAUW,IAAV,EAAgBV,MAAhB,EAAwBC,gBAAxB,EAA0CC,kBAA1C,EAA8DC,OAA9D,EAAuEC,QAAvE,CAAd;AACAC,QAAAA,KAAK,GAAG,IAAR;AACA;AACD,OAJD,CAIE,OAAOO,GAAP,EAAY;AACZP,QAAAA,KAAK,GAAG,KAAR;AACA,YAAIG,KAAK,CAACC,OAAN,CAAcG,GAAd,CAAJ,EAAwBN,IAAI,iDAAOA,IAAP,uCAAgBM,GAAhB,EAAJ,CAAxB,KACKN,IAAI,CAACO,IAAL,CAAUD,GAAV;AACN;AACF;AAhB6G;AAAA;AAAA;AAAA;AAAA;;AAkB9G,MAAI,CAACP,KAAL,EAAY,iBAAU,qBAAKN,OAAL,EAAcC,MAAM,CAACc,KAArB,CAAV,oBAA+CX,OAA/C,2EAAsFG,IAAtF;AACb;;AAED,SAASK,cAAT,CAAwBZ,OAAxB,EAAiCW,IAAjC,EAAuCV,MAAvC,EAA+CC,gBAA/C,EAAiEC,kBAAjE,EAAqFC,OAArF,EAA8FC,QAA9F,EAAwG;AACtG,MAAIM,IAAI,KAAKK,sBAAWC,MAAxB,EAAgC;AAC9B,qCAAgBjB,OAAhB,EAAyBC,MAAzB,EAAiCC,gBAAjC,EAAmDC,kBAAnD,EAAuEC,OAAvE,EAAgFC,QAAhF;AACD,GAFD,MAEO,IAAIM,IAAI,KAAKK,sBAAWE,IAApB,IAA4BP,IAAI,KAAKK,sBAAWG,OAAhD,IAA2DR,IAAI,KAAKK,sBAAWI,MAA/E,IAAyFT,IAAI,KAAKK,sBAAWK,KAAjH,EAAwH;AAC7H,qCAAgBV,IAAhB,EAAsBX,OAAtB,EAA+BC,MAA/B,EAAuCC,gBAAvC,EAAyDC,kBAAzD,EAA6EC,OAA7E,EAAsFC,QAAtF;AACD,GAFM,MAEA,IAAIM,IAAI,KAAKK,sBAAWM,OAAxB,EAAiC;AACtC,sCAAiBtB,OAAjB,EAA0BC,MAA1B,EAAkCC,gBAAlC,EAAoDC,kBAApD,EAAwEC,OAAxE,EAAiFC,QAAjF;AACD,GAFM,MAEA,IAAIM,IAAI,KAAKK,sBAAWO,MAAxB,EAAgC;AACrC,qCAAgBvB,OAAhB,EAAyBC,MAAzB,EAAiCC,gBAAjC,EAAmDC,kBAAnD,EAAuEC,OAAvE,EAAgFC,QAAhF;AACD,GAFM,MAEA,IAAIM,IAAI,KAAKK,sBAAWQ,KAAxB,EAA+B;AACpC,oCAAexB,OAAf,EAAwBC,MAAxB,EAAgCC,gBAAhC,EAAkDC,kBAAlD,EAAsEC,OAAtE,EAA+EC,QAA/E;AACD,GAFM,MAEA,IAAIM,IAAI,KAAKK,sBAAWS,IAAxB,EAA8B;AACnC,mCAAczB,OAAd,EAAuBC,MAAvB,EAA+BG,OAA/B;AACD,GAFM,MAEA;AACL,oBAAS,qBAAKJ,OAAL,EAAcC,MAAM,CAACc,KAArB,CAAT,SAAuCJ,IAAvC;AACD;AACF","sourcesContent":["import { SchemaType, path } from \"./constants\";\nimport arrayValidator from \"./arrayValidator\";\nimport booleanValidator from \"./booleanValidator\";\nimport nullValidator from \"./nullValidator\";\nimport objectValidator from \"./objectValidator\";\nimport stringValidator from \"./stringValidator\";\nimport numberValidator from \"./numberValidator\";\n\nexport default function typeValidator(parents, schema, schemaRepository, functionRepository, element, validate) {\n  let valid = false;\n  let list = [];\n\n  let types = Array.isArray(schema.type) ? schema.type : [schema.type];\n\n  for (let type of types) {\n    try {\n      typeValidation(parents, type, schema, schemaRepository, functionRepository, element, validate);\n      valid = true;\n      break;\n    } catch (err) {\n      valid = false;\n      if (Array.isArray(err)) list = [...list, ...err];\n      else list.push(err);\n    }\n  }\n\n  if (!valid) throw [`${path(parents, schema.title)}Value '${element}' is not of valid type(s)`, ...list];\n}\n\nfunction typeValidation(parents, type, schema, schemaRepository, functionRepository, element, validate) {\n  if (type === SchemaType.STRING) {\n    stringValidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  } else if (type === SchemaType.LONG || type === SchemaType.INTEGER || type === SchemaType.DOUBLE || type === SchemaType.FLOAT) {\n    numberValidator(type, parents, schema, schemaRepository, functionRepository, element, validate);\n  } else if (type === SchemaType.BOOLEAN) {\n    booleanValidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  } else if (type === SchemaType.OBJECT) {\n    objectValidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  } else if (type === SchemaType.ARRAY) {\n    arrayValidator(parents, schema, schemaRepository, functionRepository, element, validate);\n  } else if (type === SchemaType.NULL) {\n    nullValidator(parents, schema, element);\n  } else {\n    throw `${path(parents, schema.title)}${type} is not a valid type.`;\n  }\n}\n"],"file":"typeValidator.js"}