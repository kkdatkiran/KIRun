{"version":3,"sources":["../../src/schemas/objectValidator.js"],"names":["objectValidator","parents","schema","schemaRepository","functionRepository","element","validate","Array","isArray","title","keys","Set","Object","checkMinMaxProperties","propertyNames","checkPropertyNameSchema","required","checkRequired","jsonObject","properties","checkProperties","patternProperties","checkPatternProperties","additionalProperties","checkAddtionalProperties","dependencies","chekDependencies","minProperties","size","maxProperties","list","key","err","push","length","e","undefined","dependency","k","schemaValue","newParents","booleanValue","from","join","compiledPatterns","keyPattern","RegExp","goodKeys","entries","v","match","add","filter","has","s"],"mappings":"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","sourcesContent":["import { path } from \"./constants\";\n\nexport default function objectValidator(parents, schema, schemaRepository, functionRepository, element, validate) {\n  if (!element || (typeof element !== \"object\" && !Array.isArray(element))) throw `${path(parents, schema.title)}Expected an object found ${element}`;\n\n  const keys = new Set(Object.keys(element));\n\n  checkMinMaxProperties(parents, schema, keys);\n\n  if (schema.propertyNames) {\n    checkPropertyNameSchema(parents, schema, schemaRepository, functionRepository, keys, validate);\n  }\n\n  if (schema.required) {\n    checkRequired(parents, schema, jsonObject);\n  }\n\n  if (schema.properties) {\n    keys = checkProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate);\n  }\n\n  if (schema.patternProperties) {\n    keys = checkPatternProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate);\n  }\n\n  if (schema.additionalProperties) {\n    checkAddtionalProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate);\n  }\n\n  if (schema.dependencies) {\n    chekDependencies(parents, schema, jsonObject);\n  }\n}\n\nfunction checkMinMaxProperties(parents, schema, keys) {\n  if (schema.minProperties && keys.size < schema.minProperties) throw `${path(parents, schema.title)}Object should have minimum of ${schema.minProperties} properties.`;\n\n  if (schema.maxProperties && keys.size > schema.maxProperties) throw `${path(parents, schema.title)}Object should have minimum of ${schema.maxProperties} properties.`;\n}\n\nfunction checkPropertyNameSchema(parents, schema, schemaRepository, functionRepository, keys, validate) {\n  const list = [];\n  for (let key of keys) {\n    try {\n      validate(parents, schema.propertyNames, schemaRepository, functionRepository, key);\n    } catch (err) {\n      list.push(err);\n    }\n  }\n\n  if (list.length) throw list;\n}\n\nfunction checkRequired(parents, schema, jsonObject) {\n  for (let key of schema.required) {\n    if (!jsonObject[key]) throw `${path(parents, schema.title)}is mandatory.`;\n  }\n}\n\nfunction chekDependencies(parents, schema, jsonObject) {\n  let e = undefined;\n\n  for (let dependency in schema.dependencies) {\n    e = jsonObject[dependency];\n    if (!e) continue;\n    for (let k of schema.dependencies[dependency]) {\n      if (!jsonObject[k]) throw `${path(parents, schema.title)}${dependency} requires ${k}`;\n    }\n  }\n}\n\nfunction checkAddtionalProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate) {\n  if (typeof schema.additionalProperties.schemaValue === \"object\") {\n    for (let key of keys) {\n      let newParents = [...(parents ?? []), key];\n      jsonObject[key] = validate(newParents, schema.additionalProperties, schemaRepository, functionRepository, jsonObject[key]);\n    }\n  } else if (typeof schema.additionalProperties.booleanValue === \"boolean\") {\n    if (!schema.additionalProperties.booleanValue && keys.size === 0) throw `${path(parents, schema.title)}${Array.from(keys).join(\", \")} are additonal properties which are not allowed.`;\n  }\n}\n\nfunction checkPatternProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate) {\n  let compiledPatterns = {};\n  for (let keyPattern of schema.patternProperties) compiledPatterns[keyPattern] = new RegExp(keyPattern);\n\n  let goodKeys = new Set();\n\n  for (let key of keys) {\n    let newParents = [...(parents ?? []), key];\n\n    for (let [k, v] of Object.entries(compiledPatterns)) {\n      if (key.match(v)) {\n        jsonObject[key] = validate(newParents, schema.patternProperties[k], schemaRepository, functionRepository, jsonObject[key]);\n        goodKeys.add(key);\n        break;\n      }\n    }\n  }\n\n  return keys.filter((e) => goodKeys.has(e));\n}\n\nfunction checkProperties(parents, schema, schemaRepository, functionRepository, jsonObject, keys, validate) {\n  let goodKeys = new Set();\n\n  for (let [k, s] of Object.entries(schema.properties)) {\n    let newParents = [...(parents ?? []), k];\n    jsonObject[k] = validate(newParents, s, schemaRepository, functionRepository, jsonObject[k]);\n    goodKeys.add(key);\n  }\n\n  return keys.filter((e) => goodKeys.has(e));\n}\n"],"file":"objectValidator.js"}