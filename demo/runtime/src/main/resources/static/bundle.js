!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}([function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){e.exports=n(36)},function(e,t){function n(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(a,o){var i=e.apply(t,r);function l(e){n(i,a,o,l,u,"next",e)}function u(e){n(i,a,o,l,u,"throw",e)}l(void 0)}))}}},function(e,t,n){"use strict";var r=n(16),a=Object.prototype.toString;function o(e){return"[object Array]"===a.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===a.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):o(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){e.exports=n(40)},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){var r=n(37),a=n(38),o=n(14),i=n(39);e.exports=function(e,t){return r(e)||a(e,t)||o(e,t)||i()}},function(e,t,n){e.exports=n(31)()},,function(e,t,n){"use strict";(function(e){var r=n(0),a=n.n(r),o=n(10),i=n(7),l=n.n(i),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=a.a.createContext||function(e,t){var n,a,i,s="__create-react-context-"+((u[i="__global_unique_id__"]=(u[i]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(o.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?n=0:(n="function"==typeof t?t(r,a):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,i},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var p=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(o.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return p.contextTypes=((a={})[s]=l.a.object,a),{Provider:f,Consumer:p}};t.a=s}).call(this,n(33))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(34);e.exports=d,e.exports.parse=o,e.exports.compile=function(e,t){return l(o(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=p;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=a.exec(e));){var f=n[0],p=n[1],d=n.index;if(l+=e.slice(i,d),i=d+f.length,p)l+=p[1];else{var m=e[i],h=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var E=null!=h&&null!=m&&m!==h,x="+"===b||"*"===b,k="?"===b||"*"===b,T=n[2]||s,C=y||g;r.push({name:v||o++,prefix:h||"",delimiter:T,optional:k,repeat:x,partial:E,asterisk:!!w,pattern:C?c(C):w?".*":"[^"+u(T)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",f(t)));return function(t,a){for(var o="",l=t||{},u=(a||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,p=l[s.name];if(null==p){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=u(p[d]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(p),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');o+=s.prefix+f}}else o+=s}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=u(c);else{var p=u(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),i+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var m=u(n.delimiter||"/"),h=i.slice(-m.length)===m;return a||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=o?"$":a&&h?"":"(?="+m+"|$)",s(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(d(e[a],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(o(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))a.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)o.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){var r=n(15);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(3);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(a(t)+"="+a(e))})))})),o=i.join("&")}if(o){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(3),a=n(46),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=n(20)),l),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(o)})),e.exports=u}).call(this,n(45))},function(e,t,n){"use strict";var r=n(3),a=n(47),o=n(49),i=n(17),l=n(50),u=n(53),c=n(54),s=n(21);e.exports=function(e){return new Promise((function(t,n){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(m+":"+h)}var v=l(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,o={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:e,request:d};a(t,n,o),d=null}},d.onabort=function(){d&&(n(s("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(s("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(s(t,e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||c(v))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;y&&(p[e.xsrfHeaderName]=y)}if("setRequestHeader"in d&&r.forEach(p,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),n(e),d=null)})),f||(f=null),d.send(f)}))}},function(e,t,n){"use strict";var r=n(48);e.exports=function(e,t,n,a,o){var i=new Error(e);return r(i,t,n,a,o)}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){t=t||{};var n={},a=["url","method","data"],o=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(e[a],t[a])}r.forEach(a,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(o,c),r.forEach(i,(function(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(void 0,t[a])})),r.forEach(l,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var s=a.concat(o).concat(i).concat(l),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(f,c),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(28)},function(e,t,n){"use strict";var r=n(13),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=d(n);a&&a!==m&&e(t,a,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),v=0;v<i.length;++v){var y=i[v];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var g=p(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t,n){var r=n(57),a=n(58),o=n(14),i=n(59);e.exports=function(e){return r(e)||a(e)||o(e)||i()}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(12),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,l=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,c=a?Symbol.for("react.profiler"):60114,s=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,p=a?Symbol.for("react.forward_ref"):60112,d=a?Symbol.for("react.suspense"):60113,m=a?Symbol.for("react.memo"):60115,h=a?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var k=x.prototype=new E;k.constructor=x,r(k,w.prototype),k.isPureReactComponent=!0;var T={current:null},C=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:T.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g,_=[];function R(e,t,n,r){if(_.length){var a=_.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,a){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+I(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(l=t[c],c);u+=e(l,s,r,a)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+I(l,c++),r,a);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,(function(e){return e})):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(O,"$&/")+"/"),M(e,F,t=R(t,o,r,a)),L(t)}var A={current:null};function D(){var e=A.current;if(null===e)throw Error(y(321));return e}var z={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,j,t=R(null,null,t,n)),L(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return U(e,t,null,(function(e){return e})),t},only:function(e){if(!N(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=c,t.PureComponent=x,t.StrictMode=u,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=T.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)C.call(t,s)&&!S.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=N,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(12),o=n(29);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,a,o,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var u=!1,c=null,s=!1,f=null,p={onError:function(e){u=!0,c=e}};function d(e,t,n,r,a,o,i,s,f){u=!1,c=null,l.apply(p,arguments)}var m=null,h=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,a,o,l,p,m){if(d.apply(this,arguments),u){if(!u)throw Error(i(198));var h=c;u=!1,c=null,s||(s=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function w(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!x[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in x[n]=t,n=t.eventTypes){var a=void 0,o=n[r],l=t,u=r;if(k.hasOwnProperty(u))throw Error(i(99,u));k[u]=o;var c=o.phasedRegistrationNames;if(c){for(a in c)c.hasOwnProperty(a)&&E(c[a],l,u);a=!0}else o.registrationName?(E(o.registrationName,l,u),a=!0):a=!1;if(!a)throw Error(i(98,r,e))}}}}function E(e,t,n){if(T[e])throw Error(i(100,e));T[e]=t,C[e]=t.eventTypes[n].dependencies}var x=[],k={},T={},C={};function S(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(i(102,t));b[t]=r,n=!0}}n&&w()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),N=null,O=null,_=null;function R(e){if(e=h(e)){if("function"!=typeof N)throw Error(i(280));var t=e.stateNode;t&&(t=m(t),N(e.stateNode,e.type,t))}}function L(e){O?_?_.push(e):_=[e]:O=e}function M(){if(O){var e=O,t=_;if(_=O=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function I(e,t){return e(t)}function j(e,t,n,r,a){return e(t,n,r,a)}function F(){}var U=I,A=!1,D=!1;function z(){null===O&&null===_||(F(),M())}function $(e,t,n){if(D)return e(t,n);D=!0;try{return U(e,t,n)}finally{D=!1,z()}}var B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,H={},W={};function Q(e,t,n,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new Q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new Q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new Q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new Q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new Q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new Q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new Q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new Q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new Q(e,5,!1,e.toLowerCase(),null,!1)}));var q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(q,G);K[t]=new Q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(q,G);K[t]=new Q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(q,G);K[t]=new Q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new Q(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new Q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new Q(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var a=K.hasOwnProperty(t)?K[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!V.call(W,e)||!V.call(H,e)&&(B.test(e)?W[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ae=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,pe=Z?Symbol.for("react.lazy"):60116,de=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ae:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case oe:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case de:return ve(e.render);case pe:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=ve(e.type);n=null,r&&(n=ve(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(J,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ee(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Ce(e,t){Te(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Se(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ne(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Oe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function _e(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Le(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ie="http://www.w3.org/1999/xhtml",je="http://www.w3.org/2000/svg";function Fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ae,De=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==je||"innerHTML"in e)e.innerHTML=t;else{for((Ae=Ae||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ae.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ze(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Be={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},Ve={},He={};function We(e){if(Ve[e])return Ve[e];if(!Be[e])return e;var t,n=Be[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return Ve[e]=n[t];return e}P&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete Be.animationend.animation,delete Be.animationiteration.animation,delete Be.animationstart.animation),"TransitionEvent"in window||delete Be.transitionend.transition);var Qe=We("animationend"),Ke=We("animationiteration"),qe=We("animationstart"),Ge=We("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return tt(a),e;if(o===r)return tt(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(at(e,it),ot)throw Error(i(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function pt(e,t,n,r){if(st.length){var a=st.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function dt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,u=0;u<x.length;u++){var c=x[u];c&&(c=c.extractEvents(r,t,o,a,i))&&(l=rt(l,c))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Kt(e,t)}n.set(e,null)}}var ht,vt,yt,gt=!1,bt=[],wt=null,Et=null,xt=null,kt=new Map,Tt=new Map,Ct=[],St="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Nt(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function Ot(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":xt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function _t(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=Nt(t,n,r,a,o),null!==t&&(null!==(t=Nn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=Pn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Nn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){Lt(e)&&n.delete(t)}function It(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Nn(e.blockedOn))&&ht(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Lt(wt)&&(wt=null),null!==Et&&Lt(Et)&&(Et=null),null!==xt&&Lt(xt)&&(xt=null),kt.forEach(Mt),Tt.forEach(Mt)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,It)))}function Ft(e){function t(t){return jt(t,e)}if(0<bt.length){jt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&jt(wt,e),null!==Et&&jt(Et,e),null!==xt&&jt(xt,e),kt.forEach(t),Tt.forEach(t),n=0;n<Ct.length;n++)(r=Ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&null===(n=Ct[0]).blockedOn;)Rt(n),null===n.blockedOn&&Ct.shift()}var Ut={},At=new Map,Dt=new Map,zt=["abort","abort",Qe,"animationEnd",Ke,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ge,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],o="on"+(a[0].toUpperCase()+a.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Dt.set(r,t),At.set(r,o),Ut[a]=o}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(zt,2);for(var Bt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Bt.length;Vt++)Dt.set(Bt[Vt],0);var Ht=o.unstable_UserBlockingPriority,Wt=o.unstable_runWithPriority,Qt=!0;function Kt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Dt.get(t);switch(void 0===r?2:r){case 0:r=Gt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Gt(e,t,n,r){A||F();var a=Xt,o=A;A=!0;try{j(a,e,t,n,r)}finally{(A=o)||z()}}function Yt(e,t,n,r){Wt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(Qt)if(0<bt.length&&-1<St.indexOf(e))e=Nt(null,e,t,n,r),bt.push(e);else{var a=Jt(e,t,n,r);if(null===a)Ot(e,r);else if(-1<St.indexOf(e))e=Nt(a,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,a){switch(t){case"focus":return wt=_t(wt,e,t,n,r,a),!0;case"dragenter":return Et=_t(Et,e,t,n,r,a),!0;case"mouseover":return xt=_t(xt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return kt.set(o,_t(kt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Tt.set(o,_t(Tt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r)){Ot(e,r),e=pt(e,r,null,t);try{$(dt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var a=Ze(n);if(null===a)n=null;else{var o=a.tag;if(13===o){if(null!==(n=et(a)))return n;n=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=pt(e,r,n,t);try{$(dt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ie;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function dn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function En(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+kn,Cn="__reactEventHandlers$"+kn,Sn="__reactContainere$"+kn;function Pn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Sn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=xn(e);null!==e;){if(n=e[Tn])return n;e=xn(e)}return t}n=(e=n).parentNode}return null}function Nn(e){return!(e=e[Tn]||e[Sn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function On(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function _n(e){return e[Cn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ln(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Mn(e,t,n){(t=Ln(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)Mn(n[t],"captured",e);for(t=0;t<n.length;t++)Mn(n[t],"bubbled",e)}}function jn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Ln(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Fn(e){e&&e.dispatchConfig.registrationName&&jn(e._targetInst,null,e)}function Un(e){at(e,In)}var An=null,Dn=null,zn=null;function $n(){if(zn)return zn;var e,t,n=Dn,r=n.length,a="value"in An?An.value:An.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return zn=a.slice(e,1<t?1-t:void 0)}function Bn(){return!0}function Vn(){return!1}function Hn(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Bn:Vn,this.isPropagationStopped=Vn,this}function Wn(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Kn(e){e.eventPool=[],e.getPooled=Wn,e.release=Qn}a(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Bn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Bn)},persist:function(){this.isPersistent=Bn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Kn(n),n},Kn(Hn);var qn=Hn.extend({data:null}),Gn=Hn.extend({data:null}),Yn=[9,13,27,32],Xn=P&&"CompositionEvent"in window,Jn=null;P&&"documentMode"in document&&(Jn=document.documentMode);var Zn=P&&"TextEvent"in window&&!Jn,er=P&&(!Xn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ar(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var a;if(Xn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ir?ar(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ir||o!==nr.compositionStart?o===nr.compositionEnd&&ir&&(a=$n()):(Dn="value"in(An=r)?An.value:An.textContent,ir=!0)),o=qn.getPooled(o,t,n,r),a?o.data=a:null!==(a=or(n))&&(o.data=a),Un(o),a=o):a=null,(e=Zn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Xn&&ar(e,t)?(e=$n(),zn=Dn=An=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Gn.getPooled(nr.beforeInput,t,n,r)).data=e,Un(t)):t=null,null===a?t:null===t?a:[a,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Hn.getPooled(sr.change,e,t,n)).type="change",L(n),Un(e),e}var pr=null,dr=null;function mr(e){lt(e)}function hr(e){if(Ee(On(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function gr(){pr&&(pr.detachEvent("onpropertychange",br),dr=pr=null)}function br(e){if("value"===e.propertyName&&hr(dr))if(e=fr(dr,e,ut(e)),A)lt(e);else{A=!0;try{I(mr,e)}finally{A=!1,z()}}}function wr(e,t,n){"focus"===e?(gr(),dr=n,(pr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function Er(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(dr)}function xr(e,t){if("click"===e)return hr(t)}function kr(e,t){if("input"===e||"change"===e)return hr(t)}P&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var a=t?On(t):window,o=a.nodeName&&a.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===a.type)var i=vr;else if(cr(a))if(yr)i=kr;else{i=Er;var l=wr}else(o=a.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(i=xr);if(i&&(i=i(e,t)))return fr(i,n,r);l&&l(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&Pe(a,"number",a.value)}},Cr=Hn.extend({view:null,detail:null}),Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Nr(){return Pr}var Or=0,_r=0,Rr=!1,Lr=!1,Mr=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Nr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Or;return Or=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=_r;return _r=e.screenY,Lr?"mousemove"===e.type?e.screenY-t:0:(Lr=!0,0)}}),Ir=Mr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),jr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Fr={eventTypes:jr,extractEvents:function(e,t,n,r,a){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Mr,u=jr.mouseLeave,c=jr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ir,u=jr.pointerLeave,c=jr.pointerEnter,s="pointer");if(e=null==i?o:On(i),o=null==t?o:On(t),(u=l.getPooled(u,i,n,r)).type=s+"leave",u.target=e,u.relatedTarget=o,(n=l.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=i)&&s)e:{for(c=s,i=0,e=l=r;e;e=Rn(e))i++;for(e=0,t=c;t;t=Rn(t))e++;for(;0<i-e;)l=Rn(l),i--;for(;0<e-i;)c=Rn(c),e--;for(;i--;){if(l===c||l===c.alternate)break e;l=Rn(l),c=Rn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(i=r.alternate)||i!==c);)l.push(r),r=Rn(r);for(r=[];s&&s!==c&&(null===(i=s.alternate)||i!==c);)r.push(s),s=Rn(s);for(s=0;s<l.length;s++)jn(l[s],"bubbled",u);for(s=r.length;0<s--;)jn(r[s],"captured",n);return 0==(64&a)?[u]:[u,n]}};var Ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ar=Object.prototype.hasOwnProperty;function Dr(e,t){if(Ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Ar.call(t,n[r])||!Ur(e[n[r]],t[n[r]]))return!1;return!0}var zr=P&&"documentMode"in document&&11>=document.documentMode,$r={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Br=null,Vr=null,Hr=null,Wr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wr||null==Br||Br!==sn(n)?null:("selectionStart"in(n=Br)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Dr(Hr,n)?null:(Hr=n,(e=Hn.getPooled($r.select,Vr,e,t)).type="select",e.target=Br,Un(e),e))}var Kr={eventTypes:$r,extractEvents:function(e,t,n,r,a,o){if(!(o=!(a=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{a=Je(a),o=C.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?On(t):window,e){case"focus":(cr(a)||"true"===a.contentEditable)&&(Br=a,Vr=t,Hr=null);break;case"blur":Hr=Vr=Br=null;break;case"mousedown":Wr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wr=!1,Qr(n,r);case"selectionchange":if(zr)break;case"keydown":case"keyup":return Qr(n,r)}return null}},qr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Gr=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Cr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ea=Cr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Nr,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ta=Mr.extend({dataTransfer:null}),na=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Nr}),ra=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),aa=Mr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oa={eventTypes:Ut,extractEvents:function(e,t,n,r){var a=At.get(e);if(!a)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=ea;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Mr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ta;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=na;break;case Qe:case Ke:case qe:e=qr;break;case Ge:e=ra;break;case"scroll":e=Cr;break;case"wheel":e=aa;break;case"copy":case"cut":case"paste":e=Gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ir;break;default:e=Hn}return Un(t=e.getPooled(a,t,n,r)),t}};if(g)throw Error(i(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),m=_n,h=Nn,v=On,S({SimpleEventPlugin:oa,EnterLeaveEventPlugin:Fr,ChangeEventPlugin:Tr,SelectEventPlugin:Kr,BeforeInputEventPlugin:lr});var ia=[],la=-1;function ua(e){0>la||(e.current=ia[la],ia[la]=null,la--)}function ca(e,t){la++,ia[la]=e.current,e.current=t}var sa={},fa={current:sa},pa={current:!1},da=sa;function ma(e,t){var n=e.type.contextTypes;if(!n)return sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function ha(e){return null!=(e=e.childContextTypes)}function va(){ua(pa),ua(fa)}function ya(e,t,n){if(fa.current!==sa)throw Error(i(168));ca(fa,t),ca(pa,n)}function ga(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,ve(t)||"Unknown",o));return a({},n,{},r)}function ba(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||sa,da=fa.current,ca(fa,e),ca(pa,pa.current),!0}function wa(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=ga(e,t,da),r.__reactInternalMemoizedMergedChildContext=e,ua(pa),ua(fa),ca(fa,e)):ua(pa),ca(pa,n)}var Ea=o.unstable_runWithPriority,xa=o.unstable_scheduleCallback,ka=o.unstable_cancelCallback,Ta=o.unstable_requestPaint,Ca=o.unstable_now,Sa=o.unstable_getCurrentPriorityLevel,Pa=o.unstable_ImmediatePriority,Na=o.unstable_UserBlockingPriority,Oa=o.unstable_NormalPriority,_a=o.unstable_LowPriority,Ra=o.unstable_IdlePriority,La={},Ma=o.unstable_shouldYield,Ia=void 0!==Ta?Ta:function(){},ja=null,Fa=null,Ua=!1,Aa=Ca(),Da=1e4>Aa?Ca:function(){return Ca()-Aa};function za(){switch(Sa()){case Pa:return 99;case Na:return 98;case Oa:return 97;case _a:return 96;case Ra:return 95;default:throw Error(i(332))}}function $a(e){switch(e){case 99:return Pa;case 98:return Na;case 97:return Oa;case 96:return _a;case 95:return Ra;default:throw Error(i(332))}}function Ba(e,t){return e=$a(e),Ea(e,t)}function Va(e,t,n){return e=$a(e),xa(e,t,n)}function Ha(e){return null===ja?(ja=[e],Fa=xa(Pa,Qa)):ja.push(e),La}function Wa(){if(null!==Fa){var e=Fa;Fa=null,ka(e)}Qa()}function Qa(){if(!Ua&&null!==ja){Ua=!0;var e=0;try{var t=ja;Ba(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),ja=null}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),xa(Pa,Wa),t}finally{Ua=!1}}}function Ka(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function qa(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ga={current:null},Ya=null,Xa=null,Ja=null;function Za(){Ja=Xa=Ya=null}function eo(e){var t=Ga.current;ua(Ga),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Ya=e,Ja=Xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(_i=!0),e.firstContext=null)}function ro(e,t){if(Ja!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ja=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xa){if(null===Ya)throw Error(i(308));Xa=t,Ya.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xa=Xa.next=t;return e._currentValue}var ao=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function lo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.alternate;null!==n&&io(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function so(e,t,n,r){var o=e.updateQueue;ao=!1;var i=o.baseQueue,l=o.shared.pending;if(null!==l){if(null!==i){var u=i.next;i.next=l.next,l.next=u}i=l,o.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==i){u=i.next;var c=o.baseState,s=0,f=null,p=null,d=null;if(null!==u)for(var m=u;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===d?(p=d=h,f=c):d=d.next=h,l>s&&(s=l)}else{null!==d&&(d=d.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),ou(l,m.suspenseConfig);e:{var v=e,y=m;switch(l=t,h=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(h,c,l);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=y.payload)?v.call(h,c,l):v))break e;c=a({},c,l);break e;case 2:ao=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=o.effects)?o.effects=[m]:l.push(m))}if(null===(m=m.next)||m===u){if(null===(l=o.shared.pending))break;m=i.next=l.next,l.next=u,o.baseQueue=i=l,o.shared.pending=null}}null===d?f=c:d.next=p,o.baseState=f,o.baseQueue=d,iu(s),e.expirationTime=s,e.memoizedState=c}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=a,a=n,"function"!=typeof r)throw Error(i(191,r));r.call(a)}}}var po=Y.ReactCurrentBatchConfig,mo=(new r.Component).refs;function ho(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),a=po.suspense;(a=lo(r=Kl(r,e,a),a)).payload=t,null!=n&&(a.callback=n),uo(e,a),ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),a=po.suspense;(a=lo(r=Kl(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),uo(e,a),ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ql(),r=po.suspense;(r=lo(n=Kl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),uo(e,r),ql(e,n)}};function yo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!Dr(n,r)||!Dr(a,o))}function go(e,t,n){var r=!1,a=sa,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(a=ha(t)?da:fa.current,o=(r=null!=(r=t.contextTypes))?ma(e,a):sa),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mo,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=ro(o):(o=ha(t)?da:fa.current,a.context=ma(e,o)),so(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ho(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&vo.enqueueReplaceState(a,a.state,null),so(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var Eo=Array.isArray;function xo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===mo&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function To(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Su(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ou(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=xo(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=xo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=_u(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Nu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ou(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=xo(e,null,t),n.return=e,n;case te:return(t=_u(t,e.mode,n)).return=e,t}if(Eo(t)||he(t))return(t=Nu(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function d(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===a?n.type===ne?f(e,t,n.props.children,r,a):c(e,t,n,r):null;case te:return n.key===a?s(e,t,n,r):null}if(Eo(n)||he(n))return null!==a?null:f(e,t,n,r,null);ko(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,a,r.key):c(t,e,r,a);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Eo(r)||he(r))return f(t,e=e.get(n)||null,r,a,null);ko(t,r)}return null}function h(a,i,l,u){for(var c=null,s=null,f=i,h=i=0,v=null;null!==f&&h<l.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var y=d(a,f,l[h],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(a,f),i=o(y,i,h),null===s?c=y:s.sibling=y,s=y,f=v}if(h===l.length)return n(a,f),c;if(null===f){for(;h<l.length;h++)null!==(f=p(a,l[h],u))&&(i=o(f,i,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(a,f);h<l.length;h++)null!==(v=m(f,a,h,l[h],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),i=o(v,i,h),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(a,e)})),c}function v(a,l,u,c){var s=he(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,h=l,v=l=0,y=null,g=u.next();null!==h&&!g.done;v++,g=u.next()){h.index>v?(y=h,h=null):y=h.sibling;var b=d(a,h,g.value,c);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(a,h),l=o(b,l,v),null===f?s=b:f.sibling=b,f=b,h=y}if(g.done)return n(a,h),s;if(null===h){for(;!g.done;v++,g=u.next())null!==(g=p(a,g.value,c))&&(l=o(g,l,v),null===f?s=g:f.sibling=g,f=g);return s}for(h=r(a,h);!g.done;v++,g=u.next())null!==(g=m(h,a,v,g.value,c))&&(e&&null!==g.alternate&&h.delete(null===g.key?v:g.key),l=o(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&h.forEach((function(e){return t(a,e)})),s}return function(e,r,o,u){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===ne){n(e,c.sibling),(r=a(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=a(c,o.props)).ref=xo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Nu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Pu(o.type,o.key,o.props,null,e.mode,u)).ref=xo(e,r,o),u.return=e,e=u)}return l(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=_u(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Ou(o,e.mode,u)).return=e,e=r),l(e);if(Eo(o))return h(e,r,o,u);if(he(o))return v(e,r,o,u);if(s&&ko(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Co=To(!0),So=To(!1),Po={},No={current:Po},Oo={current:Po},_o={current:Po};function Ro(e){if(e===Po)throw Error(i(174));return e}function Lo(e,t){switch(ca(_o,t),ca(Oo,e),ca(No,Po),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ue(null,"");break;default:t=Ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(No),ca(No,t)}function Mo(){ua(No),ua(Oo),ua(_o)}function Io(e){Ro(_o.current);var t=Ro(No.current),n=Ue(t,e.type);t!==n&&(ca(Oo,e),ca(No,n))}function jo(e){Oo.current===e&&(ua(No),ua(Oo))}var Fo={current:0};function Uo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ao(e,t){return{responder:e,props:t}}var Do=Y.ReactCurrentDispatcher,zo=Y.ReactCurrentBatchConfig,$o=0,Bo=null,Vo=null,Ho=null,Wo=!1;function Qo(){throw Error(i(321))}function Ko(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ur(e[n],t[n]))return!1;return!0}function qo(e,t,n,r,a,o){if($o=o,Bo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Do.current=null===e||null===e.memoizedState?yi:gi,e=n(r,a),t.expirationTime===$o){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(i(301));o+=1,Ho=Vo=null,t.updateQueue=null,Do.current=bi,e=n(r,a)}while(t.expirationTime===$o)}if(Do.current=vi,t=null!==Vo&&null!==Vo.next,$o=0,Ho=Vo=Bo=null,Wo=!1,t)throw Error(i(300));return e}function Go(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ho?Bo.memoizedState=Ho=e:Ho=Ho.next=e,Ho}function Yo(){if(null===Vo){var e=Bo.alternate;e=null!==e?e.memoizedState:null}else e=Vo.next;var t=null===Ho?Bo.memoizedState:Ho.next;if(null!==t)Ho=t,Vo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Vo=e).memoizedState,baseState:Vo.baseState,baseQueue:Vo.baseQueue,queue:Vo.queue,next:null},null===Ho?Bo.memoizedState=Ho=e:Ho=Ho.next=e}return Ho}function Xo(e,t){return"function"==typeof t?t(e):t}function Jo(e){var t=Yo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Vo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=l=o=null,c=a;do{var s=c.expirationTime;if(s<$o){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,s>Bo.expirationTime&&(Bo.expirationTime=s,iu(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),ou(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==a);null===u?o=r:u.next=l,Ur(r,t.memoizedState)||(_i=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zo(e){var t=Yo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);Ur(o,t.memoizedState)||(_i=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ei(e){var t=Go();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xo,lastRenderedState:e}).dispatch=hi.bind(null,Bo,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Bo.updateQueue)?(t={lastEffect:null},Bo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Yo().memoizedState}function ri(e,t,n,r){var a=Go();Bo.effectTag|=e,a.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function ai(e,t,n,r){var a=Yo();r=void 0===r?null:r;var o=void 0;if(null!==Vo){var i=Vo.memoizedState;if(o=i.destroy,null!==r&&Ko(r,i.deps))return void ti(t,n,o,r)}Bo.effectTag|=e,a.memoizedState=ti(1|t,n,o,r)}function oi(e,t){return ri(516,4,e,t)}function ii(e,t){return ai(516,4,e,t)}function li(e,t){return ai(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ci(e,t,n){return n=null!=n?n.concat([e]):null,ai(4,2,ui.bind(null,t,e),n)}function si(){}function fi(e,t){return Go().memoizedState=[e,void 0===t?null:t],e}function pi(e,t){var n=Yo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function di(e,t){var n=Yo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function mi(e,t,n){var r=za();Ba(98>r?98:r,(function(){e(!0)})),Ba(97<r?97:r,(function(){var r=zo.suspense;zo.suspense=void 0===t?null:t;try{e(!1),n()}finally{zo.suspense=r}}))}function hi(e,t,n){var r=Ql(),a=po.suspense;a={expirationTime:r=Kl(r,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===Bo||null!==o&&o===Bo)Wo=!0,a.expirationTime=$o,Bo.expirationTime=$o;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.eagerReducer=o,a.eagerState=l,Ur(l,i))return}catch(e){}ql(e,r)}}var vi={readContext:ro,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo,useResponder:Qo,useDeferredValue:Qo,useTransition:Qo},yi={readContext:ro,useCallback:fi,useContext:ro,useEffect:oi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Go();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Go();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=hi.bind(null,Bo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Go().memoizedState=e},useState:ei,useDebugValue:si,useResponder:Ao,useDeferredValue:function(e,t){var n=ei(e),r=n[0],a=n[1];return oi((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{a(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[fi(mi.bind(null,t,e),[t,e]),n]}},gi={readContext:ro,useCallback:pi,useContext:ro,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:di,useReducer:Jo,useRef:ni,useState:function(){return Jo(Xo)},useDebugValue:si,useResponder:Ao,useDeferredValue:function(e,t){var n=Jo(Xo),r=n[0],a=n[1];return ii((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{a(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Xo),n=t[0];return t=t[1],[pi(mi.bind(null,t,e),[t,e]),n]}},bi={readContext:ro,useCallback:pi,useContext:ro,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:di,useReducer:Zo,useRef:ni,useState:function(){return Zo(Xo)},useDebugValue:si,useResponder:Ao,useDeferredValue:function(e,t){var n=Zo(Xo),r=n[0],a=n[1];return ii((function(){var n=zo.suspense;zo.suspense=void 0===t?null:t;try{a(e)}finally{zo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Xo),n=t[0];return t=t[1],[pi(mi.bind(null,t,e),[t,e]),n]}},wi=null,Ei=null,xi=!1;function ki(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ti(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ci(e){if(xi){var t=Ei;if(t){var n=t;if(!Ti(e,t)){if(!(t=En(n.nextSibling))||!Ti(e,t))return e.effectTag=-1025&e.effectTag|2,xi=!1,void(wi=e);ki(wi,n)}wi=e,Ei=En(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,xi=!1,wi=e}}function Si(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wi=e}function Pi(e){if(e!==wi)return!1;if(!xi)return Si(e),xi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=Ei;t;)ki(e,t),t=En(t.nextSibling);if(Si(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ei=En(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ei=null}}else Ei=wi?En(e.stateNode.nextSibling):null;return!0}function Ni(){Ei=wi=null,xi=!1}var Oi=Y.ReactCurrentOwner,_i=!1;function Ri(e,t,n,r){t.child=null===e?So(t,null,n,r):Co(t,e.child,n,r)}function Li(e,t,n,r,a){n=n.render;var o=t.ref;return no(t,a),r=qo(e,t,n,r,o,a),null===e||_i?(t.effectTag|=1,Ri(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qi(e,t,a))}function Mi(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Cu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ii(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:Dr)(a,r)&&e.ref===t.ref)?qi(e,t,o):(t.effectTag|=1,(e=Su(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ii(e,t,n,r,a,o){return null!==e&&Dr(e.memoizedProps,r)&&e.ref===t.ref&&(_i=!1,a<o)?(t.expirationTime=e.expirationTime,qi(e,t,o)):Fi(e,t,n,r,o)}function ji(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Fi(e,t,n,r,a){var o=ha(n)?da:fa.current;return o=ma(t,o),no(t,a),n=qo(e,t,n,r,o,a),null===e||_i?(t.effectTag|=1,Ri(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qi(e,t,a))}function Ui(e,t,n,r,a){if(ha(n)){var o=!0;ba(t)}else o=!1;if(no(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),go(t,n,r),wo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=ro(c):c=ma(t,c=ha(n)?da:fa.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&bo(t,i,r,c),ao=!1;var p=t.memoizedState;i.state=p,so(t,r,i,a),u=t.memoizedState,l!==r||p!==u||pa.current||ao?("function"==typeof s&&(ho(t,n,s,r),u=t.memoizedState),(l=ao||yo(t,n,l,r,p,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,io(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:qa(t.type,l),u=i.context,"object"==typeof(c=n.contextType)&&null!==c?c=ro(c):c=ma(t,c=ha(n)?da:fa.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&bo(t,i,r,c),ao=!1,u=t.memoizedState,i.state=u,so(t,r,i,a),p=t.memoizedState,l!==r||u!==p||pa.current||ao?("function"==typeof s&&(ho(t,n,s,r),p=t.memoizedState),(s=ao||yo(t,n,l,r,u,p,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ai(e,t,n,r,o,a)}function Ai(e,t,n,r,a,o){ji(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&wa(t,n,!1),qi(e,t,o);r=t.stateNode,Oi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Co(t,e.child,null,o),t.child=Co(t,null,l,o)):Ri(e,t,l,o),t.memoizedState=r.state,a&&wa(t,n,!0),t.child}function Di(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Lo(e,t.containerInfo)}var zi,$i,Bi,Vi={dehydrated:null,retryTime:0};function Hi(e,t,n){var r,a=t.mode,o=t.pendingProps,i=Fo.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),ca(Fo,1&i),null===e){if(void 0!==o.fallback&&Ci(t),l){if(l=o.fallback,(o=Nu(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nu(l,a,n,null)).return=t,o.sibling=n,t.memoizedState=Vi,t.child=o,n}return a=o.children,t.memoizedState=null,t.child=So(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,l){if(o=o.fallback,(n=Su(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(a=Su(a,o)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Vi,t.child=n,a}return n=Co(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,(o=Nu(null,a,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nu(l,a,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Vi,t.child=o,n}return t.memoizedState=null,t.child=Co(t,e,o.children,n)}function Wi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Qi(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=a,i.lastEffect=o)}function Ki(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Fo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wi(e,n);else if(19===e.tag)Wi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ca(Fo,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Uo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Qi(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Uo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Qi(t,!0,n,null,o,t.lastEffect);break;case"together":Qi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function qi(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&iu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Su(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Su(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ha(t.type)&&va(),null;case 3:return Mo(),ua(pa),ua(fa),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pi(t)||(t.effectTag|=4),null;case 5:jo(t),n=Ro(_o.current);var o=t.type;if(null!==e&&null!=t.stateNode)$i(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ro(No.current),Pi(t)){r=t.stateNode,o=t.type;var l=t.memoizedProps;switch(r[Tn]=t,r[Cn]=l,o){case"iframe":case"object":case"embed":Kt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Kt(Ye[e],r);break;case"source":Kt("error",r);break;case"img":case"image":case"link":Kt("error",r),Kt("load",r);break;case"form":Kt("reset",r),Kt("submit",r);break;case"details":Kt("toggle",r);break;case"input":ke(r,l),Kt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Kt("invalid",r),un(n,"onChange");break;case"textarea":Re(r,l),Kt("invalid",r),un(n,"onChange")}for(var u in an(o,l),e=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):T.hasOwnProperty(u)&&null!=c&&un(n,u)}switch(o){case"input":we(r),Se(r,l,!0);break;case"textarea":we(r),Me(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Fe(o)),e===ln?"script"===o?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(o,{is:r.is}):(e=u.createElement(o),"select"===o&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,o),e[Tn]=t,e[Cn]=r,zi(e,t),t.stateNode=e,u=on(o,r),o){case"iframe":case"object":case"embed":Kt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ye.length;c++)Kt(Ye[c],e);c=r;break;case"source":Kt("error",e),c=r;break;case"img":case"image":case"link":Kt("error",e),Kt("load",e),c=r;break;case"form":Kt("reset",e),Kt("submit",e),c=r;break;case"details":Kt("toggle",e),c=r;break;case"input":ke(e,r),c=xe(e,r),Kt("invalid",e),un(n,"onChange");break;case"option":c=Ne(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=a({},r,{value:void 0}),Kt("invalid",e),un(n,"onChange");break;case"textarea":Re(e,r),c=_e(e,r),Kt("invalid",e),un(n,"onChange");break;default:c=r}an(o,c);var s=c;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&De(e,f):"children"===l?"string"==typeof f?("textarea"!==o||""!==f)&&ze(e,f):"number"==typeof f&&ze(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&X(e,l,f,u))}switch(o){case"input":we(e),Se(e,r,!1);break;case"textarea":we(e),Me(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Oe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Bi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ro(_o.current),Ro(No.current),Pi(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return ua(Fo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pi(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=o,o.nextEffect=l):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fo.current)?Pl===wl&&(Pl=El):(Pl!==wl&&Pl!==El||(Pl=xl),0!==Ll&&null!==Tl&&(Mu(Tl,Sl),Iu(Tl,Ll)))),(n||r)&&(t.effectTag|=4),null);case 4:return Mo(),null;case 10:return eo(t),null;case 17:return ha(t.type)&&va(),null;case 19:if(ua(Fo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(l=r.rendering)){if(o)Gi(r,!1);else if(Pl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Uo(l))){for(t.effectTag|=64,Gi(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=l,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,l=e.dependencies,o.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return ca(Fo,1&Fo.current|2),t.child}l=l.sibling}}else{if(!o)if(null!==(e=Uo(l))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Gi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Da()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Gi(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Da()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Da(),n.sibling=null,t=Fo.current,ca(Fo,o?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Xi(e){switch(e.tag){case 1:ha(e.type)&&va();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Mo(),ua(pa),ua(fa),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return jo(e),null;case 13:return ua(Fo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ua(Fo),null;case 4:return Mo(),null;case 10:return eo(e),null;default:return null}}function Ji(e,t){return{value:e,source:t,stack:ye(t)}}zi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$i=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var l,u,c=t.stateNode;switch(Ro(No.current),e=null,n){case"input":i=xe(c,i),r=xe(c,r),e=[];break;case"option":i=Ne(c,i),r=Ne(c,r),e=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":i=_e(c,i),r=_e(c,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(l in an(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in c=i[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(T.hasOwnProperty(l)?(null!=s&&un(o,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Bi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function al(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void al(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:qa(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ft(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof xu&&xu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ba(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){gu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function cl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(ze(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,o=5===a||6===a;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,o=5===a||6===a;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,a,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var u=e,c=o,s=n,f=c;;)if(il(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}a?(u=r,c=o.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,a=!0,o.child.return=o,o=o.child;continue}}else if(il(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Te(n,r),on(e,a),t=on(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?De(n,u):"children"===l?ze(n,u):X(n,l,u,t)}switch(e){case"input":Ce(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Oe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Oe(n,!!r.multiple,r.defaultValue,!0):Oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Ft(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Il=Da()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,o.style.display=tn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void pl(t);case 19:return void pl(t);case 17:return}throw Error(i(163))}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=lo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Fl||(Fl=!0,Ul=r),el(e,t)},n}function hl(e,t,n){(n=lo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return el(e,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Al?Al=new Set([this]):Al.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,yl=Math.ceil,gl=Y.ReactCurrentDispatcher,bl=Y.ReactCurrentOwner,wl=0,El=3,xl=4,kl=0,Tl=null,Cl=null,Sl=0,Pl=wl,Nl=null,Ol=1073741823,_l=1073741823,Rl=null,Ll=0,Ml=!1,Il=0,jl=null,Fl=!1,Ul=null,Al=null,Dl=!1,zl=null,$l=90,Bl=null,Vl=0,Hl=null,Wl=0;function Ql(){return 0!=(48&kl)?1073741821-(Da()/10|0):0!==Wl?Wl:Wl=1073741821-(Da()/10|0)}function Kl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=za();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return Sl;if(null!==n)e=Ka(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ka(e,150,100);break;case 97:case 96:e=Ka(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Tl&&e===Sl&&--e,e}function ql(e,t){if(50<Vl)throw Vl=0,Hl=null,Error(i(185));if(null!==(e=Gl(e,t))){var n=za();1073741823===t?0!=(8&kl)&&0==(48&kl)?Zl(e):(Xl(e),0===kl&&Wa()):Xl(e),0==(4&kl)||98!==n&&99!==n||(null===Bl?Bl=new Map([[e,t]]):(void 0===(n=Bl.get(e))||n>t)&&Bl.set(e,t))}}function Gl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(Tl===a&&(iu(t),Pl===xl&&Mu(a,Sl)),Iu(a,t)),a}function Yl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Lu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ha(Zl.bind(null,e));else{var t=Yl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==La&&ka(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ha(Zl.bind(null,e)):Va(r,Jl.bind(null,e),{timeout:10*(1073741821-t)-Da()}),e.callbackNode=t}}}function Jl(e,t){if(Wl=0,t)return ju(e,t=Ql()),Xl(e),null;var n=Yl(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(i(327));if(hu(),e===Tl&&n===Sl||nu(e,n),null!==Cl){var r=kl;kl|=16;for(var a=au();;)try{uu();break}catch(t){ru(e,t)}if(Za(),kl=r,gl.current=a,1===Pl)throw t=Nl,nu(e,n),Mu(e,n),Xl(e),t;if(null===Cl)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,Tl=null,r){case wl:case 1:throw Error(i(345));case 2:ju(e,2<n?2:n);break;case El:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(a)),1073741823===Ol&&10<(a=Il+500-Da())){if(Ml){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(o=Yl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(pu.bind(null,e),a);break}pu(e);break;case xl:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(a)),Ml&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(a=Yl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==_l?r=10*(1073741821-_l)-Da():1073741823===Ol?r=0:(r=10*(1073741821-Ol)-5e3,0>(r=(a=Da())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(pu.bind(null,e),r);break}pu(e);break;case 5:if(1073741823!==Ol&&null!==Rl){o=Ol;var l=Rl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(a=0|l.busyDelayMs,r=(o=Da()-(10*(1073741821-o)-(0|l.timeoutMs||5e3)))<=a?0:a+r-o),10<r){Mu(e,n),e.timeoutHandle=bn(pu.bind(null,e),r);break}}pu(e);break;default:throw Error(i(329))}if(Xl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(i(327));if(hu(),e===Tl&&t===Sl||nu(e,t),null!==Cl){var n=kl;kl|=16;for(var r=au();;)try{lu();break}catch(t){ru(e,t)}if(Za(),kl=n,gl.current=r,1===Pl)throw n=Nl,nu(e,t),Mu(e,t),Xl(e),n;if(null!==Cl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tl=null,pu(e),Xl(e)}return null}function eu(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&Wa()}}function tu(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&Wa()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Cl)for(n=Cl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&va();break;case 3:Mo(),ua(pa),ua(fa);break;case 5:jo(r);break;case 4:Mo();break;case 13:case 19:ua(Fo);break;case 10:eo(r)}n=n.return}Tl=e,Cl=Su(e.current,null),Sl=t,Pl=wl,Nl=null,_l=Ol=1073741823,Rl=null,Ll=0,Ml=!1}function ru(e,t){for(;;){try{if(Za(),Do.current=vi,Wo)for(var n=Bo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if($o=0,Ho=Vo=Bo=null,Wo=!1,null===Cl||null===Cl.return)return Pl=1,Nl=t,Cl=null;e:{var a=e,o=Cl.return,i=Cl,l=t;if(t=Sl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.expirationTime=c.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&Fo.current),f=o;do{var p;if(p=13===f.tag){var d=f.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var m=f.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(p){var h=f.updateQueue;if(null===h){var v=new Set;v.add(u),f.updateQueue=v}else h.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=lo(1073741823,null);y.tag=2,uo(i,y)}i.expirationTime=1073741823;break e}l=void 0,i=t;var g=a.pingCache;if(null===g?(g=a.pingCache=new dl,l=new Set,g.set(u,l)):void 0===(l=g.get(u))&&(l=new Set,g.set(u,l)),!l.has(i)){l.add(i);var b=bu.bind(null,a,u,i);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(i))}5!==Pl&&(Pl=2),l=Ji(l,i),f=o;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,co(f,ml(f,u,t));break e;case 1:u=l;var w=f.type,E=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Al||!Al.has(E)))){f.effectTag|=4096,f.expirationTime=t,co(f,hl(f,u,t));break e}}f=f.return}while(null!==f)}Cl=su(Cl)}catch(e){t=e;continue}break}}function au(){var e=gl.current;return gl.current=vi,null===e?vi:e}function ou(e,t){e<Ol&&2<e&&(Ol=e),null!==t&&e<_l&&2<e&&(_l=e,Rl=t)}function iu(e){e>Ll&&(Ll=e)}function lu(){for(;null!==Cl;)Cl=cu(Cl)}function uu(){for(;null!==Cl&&!Ma();)Cl=cu(Cl)}function cu(e){var t=vl(e.alternate,e,Sl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),bl.current=null,t}function su(e){Cl=e;do{var t=Cl.alternate;if(e=Cl.return,0==(2048&Cl.effectTag)){if(t=Yi(t,Cl,Sl),1===Sl||1!==Cl.childExpirationTime){for(var n=0,r=Cl.child;null!==r;){var a=r.expirationTime,o=r.childExpirationTime;a>n&&(n=a),o>n&&(n=o),r=r.sibling}Cl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Cl.firstEffect),null!==Cl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Cl.firstEffect),e.lastEffect=Cl.lastEffect),1<Cl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Cl:e.firstEffect=Cl,e.lastEffect=Cl))}else{if(null!==(t=Xi(Cl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Cl.sibling))return t;Cl=e}while(null!==Cl);return Pl===wl&&(Pl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function pu(e){var t=za();return Ba(99,du.bind(null,e,t)),null}function du(e,t){do{hu()}while(null!==zl);if(0!=(48&kl))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=fu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tl&&(Cl=Tl=null,Sl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var o=kl;kl|=32,bl.current=null,hn=Qt;var l=dn();if(mn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var p=0,d=-1,m=-1,h=0,v=0,y=l,g=null;t:for(;;){for(var b;y!==u||0!==s&&3!==y.nodeType||(d=p+s),y!==f||0!==c&&3!==y.nodeType||(m=p+c),3===y.nodeType&&(p+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===l)break t;if(g===u&&++h===s&&(d=p),g===f&&++v===c&&(m=p),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}u=-1===d||-1===m?null:{start:d,end:m}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},Qt=!1,jl=a;do{try{mu()}catch(e){if(null===jl)throw Error(i(330));gu(jl,e),jl=jl.nextEffect}}while(null!==jl);jl=a;do{try{for(l=e,u=t;null!==jl;){var w=jl.effectTag;if(16&w&&ze(jl.stateNode,""),128&w){var E=jl.alternate;if(null!==E){var x=E.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&w){case 2:cl(jl),jl.effectTag&=-3;break;case 6:cl(jl),jl.effectTag&=-3,fl(jl.alternate,jl);break;case 1024:jl.effectTag&=-1025;break;case 1028:jl.effectTag&=-1025,fl(jl.alternate,jl);break;case 4:fl(jl.alternate,jl);break;case 8:sl(l,s=jl,u),ll(s)}jl=jl.nextEffect}}catch(e){if(null===jl)throw Error(i(330));gu(jl,e),jl=jl.nextEffect}}while(null!==jl);if(x=vn,E=dn(),w=x.focusedElem,u=x.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&mn(w)&&(E=u.start,void 0===(x=u.end)&&(x=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(x,w.value.length)):(x=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(x=x.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!x.extend&&l>u&&(s=u,u=l,l=s),s=pn(w,l),f=pn(w,u),s&&f&&(1!==x.rangeCount||x.anchorNode!==s.node||x.anchorOffset!==s.offset||x.focusNode!==f.node||x.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),x.removeAllRanges(),l>u?(x.addRange(E),x.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),x.addRange(E))))),E=[];for(x=w;x=x.parentNode;)1===x.nodeType&&E.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(x=E[w]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Qt=!!hn,vn=hn=null,e.current=n,jl=a;do{try{for(w=e;null!==jl;){var k=jl.effectTag;if(36&k&&ol(w,jl.alternate,jl),128&k){E=void 0;var T=jl.ref;if(null!==T){var C=jl.stateNode;switch(jl.tag){case 5:E=C;break;default:E=C}"function"==typeof T?T(E):T.current=E}}jl=jl.nextEffect}}catch(e){if(null===jl)throw Error(i(330));gu(jl,e),jl=jl.nextEffect}}while(null!==jl);jl=null,Ia(),kl=o}else e.current=n;if(Dl)Dl=!1,zl=e,$l=t;else for(jl=a;null!==jl;)t=jl.nextEffect,jl.nextEffect=null,jl=t;if(0===(t=e.firstPendingTime)&&(Al=null),1073741823===t?e===Hl?Vl++:(Vl=0,Hl=e):Vl=0,"function"==typeof Eu&&Eu(n.stateNode,r),Xl(e),Fl)throw Fl=!1,e=Ul,Ul=null,e;return 0!=(8&kl)||Wa(),null}function mu(){for(;null!==jl;){var e=jl.effectTag;0!=(256&e)&&nl(jl.alternate,jl),0==(512&e)||Dl||(Dl=!0,Va(97,(function(){return hu(),null}))),jl=jl.nextEffect}}function hu(){if(90!==$l){var e=97<$l?97:$l;return $l=90,Ba(e,vu)}}function vu(){if(null===zl)return!1;var e=zl;if(zl=null,0!=(48&kl))throw Error(i(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),al(5,n)}}catch(t){if(null===e)throw Error(i(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,Wa(),!0}function yu(e,t,n){uo(e,t=ml(e,t=Ji(n,t),1073741823)),null!==(e=Gl(e,1073741823))&&Xl(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Al||!Al.has(r))){uo(n,e=hl(n,e=Ji(t,e),1073741823)),null!==(n=Gl(n,1073741823))&&Xl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tl===e&&Sl===n?Pl===xl||Pl===El&&1073741823===Ol&&Da()-Il<500?nu(e,Sl):Ml=!0:Lu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Kl(t=Ql(),e,null)),null!==(e=Gl(e,t))&&Xl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||pa.current)_i=!0;else{if(r<n){switch(_i=!1,t.tag){case 3:Di(t),Ni();break;case 5:if(Io(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ha(t.type)&&ba(t);break;case 4:Lo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,a=t.type._context,ca(Ga,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Hi(e,t,n):(ca(Fo,1&Fo.current),null!==(t=qi(e,t,n))?t.sibling:null);ca(Fo,1&Fo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ki(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),ca(Fo,Fo.current),!r)return null}return qi(e,t,n)}_i=!1}}else _i=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=ma(t,fa.current),no(t,n),a=qo(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ha(r)){var o=!0;ba(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,oo(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ho(t,r,l,e),a.updater=vo,t.stateNode=a,a._reactInternalFiber=t,wo(t,r,e,n),t=Ai(null,t,r,!0,o,n)}else t.tag=0,Ri(null,t,a,n),t=t.child;return t;case 16:e:{if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,o=t.tag=function(e){if("function"==typeof e)return Cu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(a),e=qa(a,e),o){case 0:t=Fi(null,t,a,e,n);break e;case 1:t=Ui(null,t,a,e,n);break e;case 11:t=Li(null,t,a,e,n);break e;case 14:t=Mi(null,t,a,qa(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Fi(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ui(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 3:if(Di(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,io(e,t),so(t,r,null,n),(r=t.memoizedState.element)===a)Ni(),t=qi(e,t,n);else{if((a=t.stateNode.hydrate)&&(Ei=En(t.stateNode.containerInfo.firstChild),wi=t,a=xi=!0),a)for(n=So(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ri(e,t,r,n),Ni();t=t.child}return t;case 5:return Io(t),null===e&&Ci(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,gn(r,a)?l=null:null!==o&&gn(r,o)&&(t.effectTag|=16),ji(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ri(e,t,l,n),t=t.child),t;case 6:return null===e&&Ci(t),null;case 13:return Hi(e,t,n);case 4:return Lo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Co(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Li(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var u=t.type._context;if(ca(Ga,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0===(o=Ur(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!pa.current){t=qi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===u.tag&&((s=lo(n,null)).tag=2,uo(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),to(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ri(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(a=ro(a,o.unstable_observedBits)),t.effectTag|=1,Ri(e,t,r,n),t.child;case 14:return o=qa(a=t.type,t.pendingProps),Mi(e,t,a,o=qa(a.type,o),r,n);case 15:return Ii(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ha(r)?(e=!0,ba(t)):e=!1,no(t,n),go(t,r,a),wo(t,r,a,n),Ai(null,t,r,!0,e,n);case 19:return Ki(e,t,n)}throw Error(i(156,t.tag))};var Eu=null,xu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tu(e,t,n,r){return new ku(e,t,n,r)}function Cu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Su(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Cu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Nu(n.children,a,o,t);case le:l=8,a|=7;break;case re:l=8,a|=1;break;case ae:return(e=Tu(12,n,t,8|a)).elementType=ae,e.type=ae,e.expirationTime=o,e;case ce:return(e=Tu(13,n,t,a)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=Tu(19,n,t,a)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:l=10;break e;case ie:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case pe:l=16,r=null;break e;case de:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Tu(l,n,t,a)).elementType=e,t.type=r,t.expirationTime=o,t}function Nu(e,t,n,r){return(e=Tu(7,e,r,t)).expirationTime=n,e}function Ou(e,t,n){return(e=Tu(6,e,null,t)).expirationTime=n,e}function _u(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ru(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Lu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Mu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Iu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function ju(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Fu(e,t,n,r){var a=t.current,o=Ql(),l=po.suspense;o=Kl(o,a,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ha(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(ha(c)){n=ga(n,c,u);break e}}n=u}else n=sa;return null===t.context?t.context=n:t.pendingContext=n,(t=lo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(a,t),ql(a,o),o}function Uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Au(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Du(e,t){Au(e,t),(e=e.alternate)&&Au(e,t)}function zu(e,t,n){var r=new Ru(e,t,n=null!=n&&!0===n.hydrate),a=Tu(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,oo(a),e[Sn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);St.forEach((function(e){mt(e,t,n)})),Pt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $u(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Uu(i);l.call(e)}}Fu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Uu(i);u.call(e)}}tu((function(){Fu(t,i,e,a)}))}return Uu(i)}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$u(t))throw Error(i(200));return Vu(e,t,null,n)}zu.prototype.render=function(e){Fu(e,this._internalRoot,null,null)},zu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Fu(null,e,null,(function(){t[Sn]=null}))},ht=function(e){if(13===e.tag){var t=Ka(Ql(),150,100);ql(e,t),Du(e,t)}},vt=function(e){13===e.tag&&(ql(e,3),Du(e,3))},yt=function(e){if(13===e.tag){var t=Ql();ql(e,t=Kl(t,e,null)),Du(e,t)}},N=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=_n(r);if(!a)throw Error(i(90));Ee(r),Ce(r,a)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Oe(e,!!n.multiple,t,!1)}},I=eu,j=function(e,t,n,r,a){var o=kl;kl|=4;try{return Ba(98,e.bind(null,t,n,r,a))}finally{0===(kl=o)&&Wa()}},F=function(){0==(49&kl)&&(function(){if(null!==Bl){var e=Bl;Bl=null,e.forEach((function(e,t){ju(t,e),Xl(t)})),Wa()}}(),hu())},U=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&Wa()}};var Wu,Qu,Ku={Events:[Nn,On,_n,S,k,Un,function(e){at(e,Fn)},L,M,Xt,lt,hu,{current:!1}]};Qu=(Wu={findFiberByHostInstance:Pn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Eu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},xu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},Wu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Qu?Qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ku,t.createPortal=Hu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(i(187));var n=kl;kl|=1;try{return Ba(99,e.bind(null,t))}finally{kl=n,Wa()}},t.hydrate=function(e,t,n){if(!$u(t))throw Error(i(200));return Bu(null,e,t,!0,n)},t.render=function(e,t,n){if(!$u(t))throw Error(i(200));return Bu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$u(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){Bu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Sn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Hu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$u(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Bu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,o,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},a=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var g=!1,b=null,w=-1,E=5,x=0;i=function(){return t.unstable_now()>=x},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,T=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();x=e+E;try{b(!0,e)?T.postMessage(null):(g=!1,b=null)}catch(e){throw T.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,T.postMessage(null))},a=function(e,n){w=m((function(){e(t.unstable_now())}),n)},o=function(){h(w),w=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<N(a,t)))break e;e[r]=t,e[n]=a,n=r}}function S(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>N(i,n))void 0!==u&&0>N(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>N(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function N(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],_=[],R=1,L=null,M=3,I=!1,j=!1,F=!1;function U(e){for(var t=S(_);null!==t;){if(null===t.callback)P(_);else{if(!(t.startTime<=e))break;P(_),t.sortIndex=t.expirationTime,C(O,t)}t=S(_)}}function A(e){if(F=!1,U(e),!j)if(null!==S(O))j=!0,r(D);else{var t=S(_);null!==t&&a(A,t.startTime-e)}}function D(e,n){j=!1,F&&(F=!1,o()),I=!0;var r=M;try{for(U(n),L=S(O);null!==L&&(!(L.expirationTime>n)||e&&!i());){var l=L.callback;if(null!==l){L.callback=null,M=L.priorityLevel;var u=l(L.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?L.callback=u:L===S(O)&&P(O),U(n)}else P(O);L=S(O)}if(null!==L)var c=!0;else{var s=S(_);null!==s&&a(A,s.startTime-n),c=!1}return c}finally{L=null,M=r,I=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||I||(j=!0,r(D))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return S(O)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:z(e)}else i=z(e),u=l;return e={id:R++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,C(_,e),null===S(O)&&e===S(_)&&(F?o():F=!0,a(A,u-l))):(e.sortIndex=i,C(O,e),j||I||(j=!0,r(D))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();U(e);var n=S(O);return n!==L&&null!==L&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<L.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},function(e,t,n){"use strict";var r=n(32);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case f:case p:case i:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case d:case y:case v:case c:return e;default:return t}}case o:return t}}}function k(e){return x(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=a,t.ForwardRef=d,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return k(e)||x(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===i},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===u||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d||e.$$typeof===b||e.$$typeof===w||e.$$typeof===E||e.$$typeof===g)},t.typeOf=x},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof f?t:f,o=Object.create(a.prototype),i=new k(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return C()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===s)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===s)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var s={};function f(){}function p(){}function d(){}var m={};m[a]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(T([])));v&&v!==t&&n.call(v,a)&&(m=v);var y=d.prototype=f.prototype=Object.create(m);function g(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){var r;this._invoke=function(a,o){function i(){return new t((function(r,i){!function r(a,o,i,l){var u=c(e[a],e,o);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}(a,o,r,i)}))}return r=r?r.then(i,i):i()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return s;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,s;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,s):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,s)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function T(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=y.constructor=d,d.constructor=p,p.displayName=l(d,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,l(e,i,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},g(b.prototype),b.prototype[o]=function(){return this},e.AsyncIterator=b,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new b(u(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},g(y),l(y,i,"Generator"),y[a]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],i=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(l&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,s):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),s},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),s}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:T(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){"use strict";var r=n(3),a=n(16),o=n(41),i=n(22);function l(e){var t=new o(e),n=a(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var u=l(n(19));u.Axios=o,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=n(23),u.CancelToken=n(55),u.isCancel=n(18),u.all=function(e){return Promise.all(e)},u.spread=n(56),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(3),a=n(17),o=n(42),i=n(43),l=n(22);function u(e){this.defaults=e,this.interceptors={request:new o,response:new o}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(3);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},function(e,t,n){"use strict";var r=n(3),a=n(44),o=n(18),i=n(19);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(l(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,c=[],s=!1,f=-1;function p(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!s){var e=l(p);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||s||l(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=h,a.addListener=h,a.once=h,a.off=h,a.removeListener=h,a.removeAllListeners=h,a.emit=h,a.prependListener=h,a.prependOnceListener=h,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(21);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(3);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(a)&&l.push("path="+a),r.isString(o)&&l.push("domain="+o),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(51),a=n(52);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(3),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(i[t]&&a.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(3);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(23);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r=n(15);e.exports=function(e){if(Array.isArray(e))return r(e)}},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(24),i=n.n(o);function l(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n(7);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){return"/"===e.charAt(0)}function s(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var f=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],o=e&&c(e),i=t&&c(t),l=o||i;if(e&&c(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var u=a[a.length-1];n="."===u||".."===u||""===u}else n=!1;for(var f=0,p=a.length;p>=0;p--){var d=a[p];"."===d?s(a,p):".."===d?(s(a,p),f++):f&&(s(a,p),f--)}if(!l)for(;f--;f)a.unshift("..");!l||""===a[0]||a[0]&&c(a[0])||a.unshift("");var m=a.join("/");return n&&"/"!==m.substr(-1)&&(m+="/"),m};var p=function(e,t){if(!e)throw new Error("Invariant failed")};function d(e){return"/"===e.charAt(0)?e:"/"+e}function m(e){return"/"===e.charAt(0)?e.substr(1):e}function h(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function v(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function y(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function g(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=u({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=f(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var w=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}function x(){try{return window.history.state||{}}catch(e){return{}}}function k(e){void 0===e&&(e={}),w||p(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,i=o.forceRefresh,l=void 0!==i&&i,c=o.getUserConfirmation,s=void 0===c?E:c,f=o.keyLength,m=void 0===f?6:f,k=e.basename?v(d(e.basename)):"";function T(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname+a.search+a.hash;return k&&(o=h(o,k)),g(o,r,n)}function C(){return Math.random().toString(36).substr(2,m)}var S=b();function P(e){u(D,e),D.length=n.length,S.notifyListeners(D.location,D.action)}function N(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(T(e.state))}function O(){R(T(x()))}var _=!1;function R(e){if(_)_=!1,P();else{S.confirmTransitionTo(e,"POP",s,(function(t){t?P({action:"POP",location:e}):function(e){var t=D.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(_=!0,j(a))}(e)}))}}var L=T(x()),M=[L.key];function I(e){return k+y(e)}function j(e){n.go(e)}var F=0;function U(e){1===(F+=e)&&1===e?(window.addEventListener("popstate",N),a&&window.addEventListener("hashchange",O)):0===F&&(window.removeEventListener("popstate",N),a&&window.removeEventListener("hashchange",O))}var A=!1;var D={length:n.length,action:"POP",location:L,createHref:I,push:function(e,t){var a=g(e,t,C(),D.location);S.confirmTransitionTo(a,"PUSH",s,(function(e){if(e){var t=I(a),o=a.key,i=a.state;if(r)if(n.pushState({key:o,state:i},null,t),l)window.location.href=t;else{var u=M.indexOf(D.location.key),c=M.slice(0,u+1);c.push(a.key),M=c,P({action:"PUSH",location:a})}else window.location.href=t}}))},replace:function(e,t){var a=g(e,t,C(),D.location);S.confirmTransitionTo(a,"REPLACE",s,(function(e){if(e){var t=I(a),o=a.key,i=a.state;if(r)if(n.replaceState({key:o,state:i},null,t),l)window.location.replace(t);else{var u=M.indexOf(D.location.key);-1!==u&&(M[u]=a.key),P({action:"REPLACE",location:a})}else window.location.replace(t)}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=S.setPrompt(e);return A||(U(1),A=!0),function(){return A&&(A=!1,U(-1)),t()}},listen:function(e){var t=S.appendListener(e);return U(1),function(){U(-1),t()}}};return D}var T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+m(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:m,decodePath:d},slash:{encodePath:d,decodePath:d}};function C(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function S(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function P(e){window.location.replace(C(window.location.href)+"#"+e)}function N(e){void 0===e&&(e={}),w||p(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?E:r,o=n.hashType,i=void 0===o?"slash":o,l=e.basename?v(d(e.basename)):"",c=T[i],s=c.encodePath,f=c.decodePath;function m(){var e=f(S());return l&&(e=h(e,l)),g(e)}var x=b();function k(e){u(D,e),D.length=t.length,x.notifyListeners(D.location,D.action)}var N=!1,O=null;function _(){var e,t,n=S(),r=s(n);if(n!==r)P(r);else{var o=m(),i=D.location;if(!N&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(O===y(o))return;O=null,function(e){if(N)N=!1,k();else{x.confirmTransitionTo(e,"POP",a,(function(t){t?k({action:"POP",location:e}):function(e){var t=D.location,n=I.lastIndexOf(y(t));-1===n&&(n=0);var r=I.lastIndexOf(y(e));-1===r&&(r=0);var a=n-r;a&&(N=!0,j(a))}(e)}))}}(o)}}var R=S(),L=s(R);R!==L&&P(L);var M=m(),I=[y(M)];function j(e){t.go(e)}var F=0;function U(e){1===(F+=e)&&1===e?window.addEventListener("hashchange",_):0===F&&window.removeEventListener("hashchange",_)}var A=!1;var D={length:t.length,action:"POP",location:M,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=C(window.location.href)),n+"#"+s(l+y(e))},push:function(e,t){var n=g(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"PUSH",a,(function(e){if(e){var t=y(n),r=s(l+t);if(S()!==r){O=t,function(e){window.location.hash=e}(r);var a=I.lastIndexOf(y(D.location)),o=I.slice(0,a+1);o.push(t),I=o,k({action:"PUSH",location:n})}else k()}}))},replace:function(e,t){var n=g(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"REPLACE",a,(function(e){if(e){var t=y(n),r=s(l+t);S()!==r&&(O=t,P(r));var a=I.indexOf(y(D.location));-1!==a&&(I[a]=t),k({action:"REPLACE",location:n})}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=x.setPrompt(e);return A||(U(1),A=!0),function(){return A&&(A=!1,U(-1)),t()}},listen:function(e){var t=x.appendListener(e);return U(1),function(){U(-1),t()}}};return D}function O(e,t,n){return Math.min(Math.max(e,t),n)}function _(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,a=void 0===r?["/"]:r,o=t.initialIndex,i=void 0===o?0:o,l=t.keyLength,c=void 0===l?6:l,s=b();function f(e){u(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function p(){return Math.random().toString(36).substr(2,c)}var d=O(i,0,a.length-1),m=a.map((function(e){return g(e,void 0,"string"==typeof e?p():e.key||p())})),h=y;function v(e){var t=O(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:m.length,action:"POP",location:m[d],index:d,entries:m,createHref:h,push:function(e,t){var r=g(e,t,p(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=g(e,t,p(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}var R=n(9),L=n(11),M=n.n(L);n(13);function I(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n(25);var j=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router-History"),F=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router"),U=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}l(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(F.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},a.a.createElement(j.Provider,{children:this.props.children||null,value:this.props.history}))},t}(a.a.Component);a.a.Component;a.a.Component;var A={},D=0;function z(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,l=void 0!==i&&i,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=A[n]||(A[n]={});if(r[e])return r[e];var a=[],o={regexp:M()(e,a,t),keys:a};return D<1e4&&(r[e]=o,D++),o}(n,{end:o,strict:l,sensitive:c}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),p=e===s;return o&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var $=function(e){function t(){return e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(F.Consumer,null,(function(t){t||p(!1);var n=e.props.location||t.location,r=u({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?z(n.pathname,e.props):t.match}),o=e.props,i=o.children,l=o.component,c=o.render;return Array.isArray(i)&&0===i.length&&(i=null),a.a.createElement(F.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:l?a.a.createElement(l,r):c?c(r):null:"function"==typeof i?i(r):null)}))},t}(a.a.Component);function B(e){return"/"===e.charAt(0)?e:"/"+e}function V(e,t){if(!e)return t;var n=B(e);return 0!==t.pathname.indexOf(n)?t:u({},t,{pathname:t.pathname.substr(n.length)})}function H(e){return"string"==typeof e?e:y(e)}function W(e){return function(){p(!1)}}function Q(){}a.a.Component;var K=function(e){function t(){return e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(F.Consumer,null,(function(t){t||p(!1);var n,r,o=e.props.location||t.location;return a.a.Children.forEach(e.props.children,(function(e){if(null==r&&a.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?z(o.pathname,u({},e.props,{path:i})):t.match}})),r?a.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(a.a.Component);var q=a.a.useContext;function G(){return q(j)}var Y=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).history=k(t.props),t}return l(t,e),t.prototype.render=function(){return a.a.createElement(U,{history:this.history,children:this.props.children})},t}(a.a.Component);a.a.Component;var X=function(e,t){return"function"==typeof e?e(t):e},J=function(e,t){return"string"==typeof e?g(e,null,null,t):e},Z=function(e){return e},ee=a.a.forwardRef;void 0===ee&&(ee=Z);var te=ee((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=I(e,["innerRef","navigate","onClick"]),l=i.target,c=u({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=Z!==ee&&t||n,a.a.createElement("a",c)}));var ne=ee((function(e,t){var n=e.component,r=void 0===n?te:n,o=e.replace,i=e.to,l=e.innerRef,c=I(e,["component","replace","to","innerRef"]);return a.a.createElement(F.Consumer,null,(function(e){e||p(!1);var n=e.history,s=J(X(i,e.location),e.location),f=s?n.createHref(s):"",d=u({},c,{href:f,navigate:function(){var t=X(i,e.location);(o?n.replace:n.push)(t)}});return Z!==ee?d.ref=t||l:d.innerRef=l,a.a.createElement(r,d)}))})),re=function(e){return e},ae=a.a.forwardRef;void 0===ae&&(ae=re);var oe=ae((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,l=e.activeStyle,c=e.className,s=e.exact,f=e.isActive,d=e.location,m=e.sensitive,h=e.strict,v=e.style,y=e.to,g=e.innerRef,b=I(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return a.a.createElement(F.Consumer,null,(function(e){e||p(!1);var n=d||e.location,o=J(X(y,n),n),w=o.pathname,E=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=E?z(n.pathname,{path:E,exact:s,sensitive:m,strict:h}):null,k=!!(f?f(x,n):x),T=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,C=k?u({},v,{},l):v,S=u({"aria-current":k&&r||null,className:T,style:C,to:o},b);return re!==ae?S.ref=t||g:S.innerRef=g,a.a.createElement(ne,S)}))}));function ie(e){return a.a.createElement(a.a.Fragment,null,a.a.createElement("nav",{className:e.isDemo?"demoNav":""},a.a.createElement("div",{className:"home"},a.a.createElement(oe,{exact:!0,to:"/",activeClassName:"activeLink"},"HOME")),a.a.createElement("div",{className:"github"},a.a.createElement("a",{href:"https://github.com/kkdatkiran/KIRun",rel:"noreferrer",target:"_blank"},"GITHUB")),a.a.createElement("div",{className:"docs"},a.a.createElement(oe,{to:"/docs",activeClassName:"activeLink"},"DOCS")),a.a.createElement("div",{className:"demo"},a.a.createElement(oe,{to:"/demo",activeClassName:"activeLink"},"DEMO")),a.a.createElement("div",{className:"about"},a.a.createElement(oe,{to:"/about",activeClassName:"activeLink"},"ABOUT")),a.a.createElement("div",{className:"contactUs"},a.a.createElement(oe,{to:"/contactUS",activeClassName:"activeLink"},"CONTACT"))),a.a.createElement("div",{className:e.isDemo?"demo footer":"footer"},"The contents of this website and the GitHub repository are under the MIT License. ©2020"))}function le(){return a.a.createElement(a.a.Fragment,null,a.a.createElement("h1",null,"What is Kinetic Instruction Runtime (KIRUN)?"),a.a.createElement("p",null,a.a.createElement("br",null),"KIRUN, in simple terms, is a toolset or an entry point to build a no-code or low code platform.",a.a.createElement("br",null),a.a.createElement("br",null),"Every application at one point in time needs to supply customization for each client. There are no set rules or products readily available to the developer to integrate without having to jump through a lot of hoops. Here I am building this product to supply the toolset to enable end-user to easily change logic without needing to have programming knowledge with the minimal development effort.",a.a.createElement("br",null),a.a.createElement("br",null),"The idea here is to supply a set of instructions in JSON format and execute them. The heart of this product is to define a schema definition for the JSON formatted instructions and an engine to run them. Also, a UI tool which can be used to create the instruction set and easily integrated into any web application.",a.a.createElement("br",null),a.a.createElement("br",null)),a.a.createElement("h2",null,"Example"),a.a.createElement("div",{className:"json"},a.a.createElement("div",{className:"header"},"Generate fibonacci numbers and return them."),a.a.createElement("div",{className:"body"},JSON.stringify({abcde:2,value:3},null,2))),a.a.createElement("p",null,a.a.createElement("br",null),"To understand better, please checkout the demo."))}function ue(){var e=Math.round((Date.now()-new Date("November 7, 2005 09:00:00").getTime())/31536e6);return a.a.createElement(a.a.Fragment,null,a.a.createElement("h1",null,"ABOUT"),a.a.createElement("p",null,a.a.createElement("br",null),"My name is ",a.a.createElement("b",null,"Kiran Grandhi"),". I have been developing applications for"," ",e," years in various domains on multiple platforms, all along I had trouble providing a window for an end-user to edit a piece of logic here or there. I recently had a lot of time to thinkk while recovering from COVID-19 while lying on the bed. It gave me a thought about why not define language simple enough to build in JSON.",a.a.createElement("br",null),a.a.createElement("br",null),"The objective of this deceptively simple initative is to understand the structured JSON input and execute it as instructions of a program. More you put your thought about it, the more fascinating it appears and becomes. An unstructured text called a program fed to an interpreter or a compiler it starts breaking it into meaningful tokens and try to execute. Here trying to keep it simple using a structured JSON map with pre-defined operations. A user can easily edit this JSON with a simple visual tool to change the course of execution logic.",a.a.createElement("br",null),a.a.createElement("br",null),"This initative will be managed by few people to showcase the idea. The code will be available in the repository for others to accessd and run and see and use the code where and when wanted. Maybe, later we shall make it as a library to be used as a module."))}function ce(){return a.a.createElement(a.a.Fragment,null,a.a.createElement("h1",null,"DOCUMENTATION"))}var se,fe=n(1),pe=n.n(fe),de=n(2),me=n.n(de),he=n(6),ve=n.n(he),ye=n(5),ge=n.n(ye);function be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?be(Object(n),!0).forEach((function(t){ge()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ee=a.a.createContext(),xe=a.a.createContext(),ke={},Te=(se={},ge()(se,2,{key:"name",errorKey:"nameError",title:"Name"}),ge()(se,4,{key:"email",errorKey:"emailError",title:"Email"}),ge()(se,6,{key:"message",errorKey:"messageError",title:"Message"}),ge()(se,8,{key:"captcha",errorKey:"captchaError",title:"Captcha"}),se);function Ce(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ke,t=arguments.length>1?arguments[1]:void 0;if(!t)return e;if(!t.type)return e;switch(t.type){case 1:return we(we({},e),t.payload);case 16:var n=we({},e);return Object.values(Te).forEach((function(e){n[e.key]?delete n[e.errorKey]:n[e.errorKey]=e.title+" cannot be empty."})),n;case 2:case 4:case 6:case 8:var r=Te[t.type].key,a=Te[t.type].errorKey,o=we(we({},e),{},ge()({},r,t.payload));return""===t.payload?o[a]=Te[t.type].title+" cannot be empty.":delete o[a],o;case 32:return ke;default:return e}}function Se(e){var t=e.children,n=a.a.useReducer(Ce,ke),r=ve()(n,2),o=r[0],i=r[1];return a.a.createElement(Ee.Provider,{value:o},a.a.createElement(xe.Provider,{value:i},t))}var Pe=n(4),Ne=n.n(Pe);function Oe(){return _e.apply(this,arguments)}function _e(){return(_e=me()(pe.a.mark((function e(){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.get("/api/captcha"));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Re(e){return Le.apply(this,arguments)}function Le(){return(Le=me()(pe.a.mark((function e(t){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.post("/api/contactUs",t));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Me(){return(Me=me()(pe.a.mark((function e(t,n){var r,a,o,i,l;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.contactUs,a=r.name,o=r.email,i=r.message,l=n.captcha,a&&o&&i&&l){e.next=4;break}return t({type:16}),e.abrupt("return");case 4:return e.next=6,Re(n);case 6:t({type:32}),Ie(t);case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ie(e){return je.apply(this,arguments)}function je(){return(je=me()(pe.a.mark((function e(t){var n,r,a;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oe();case 2:n=e.sent,r=n.data,a=(r=void 0===r?{}:r).data,t({type:1,payload:a});case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Fe(){var e,t,n,o,i=function(){var e=a.a.useContext(xe);if(!e)throw new Error("Unable create context for contact context. Please use in components wrapped in ContactContextProvider.");return e}(),l=function(){var e=a.a.useContext(Ee);if(!e)throw new Error("Unable create context for contact context. Please use in components wrapped in ContactContextProvider.");return e}(),u=l.captchaImageURL,c=l.name,s=void 0===c?"":c,f=l.nameError,p=l.email,d=void 0===p?"":p,m=l.emailError,h=l.message,v=void 0===h?"":h,y=l.messageError,g=l.captcha,b=void 0===g?"":g,w=l.captchaError,E=l.captchaString;return Object(r.useEffect)((function(){Ie(i)}),[]),f&&(e=a.a.createElement("div",{className:"errorMessage"}," ",f," ")),m&&(t=a.a.createElement("div",{className:"errorMessage"}," ",m," ")),y&&(n=a.a.createElement("div",{className:"errorMessage"}," ",y," ")),w&&(o=a.a.createElement("div",{className:"errorMessage"}," ",w," ")),a.a.createElement(a.a.Fragment,null,a.a.createElement("h1",null,"CONTACT"),a.a.createElement("p",null,a.a.createElement("br",null),"Please leave a message and will get back to you at the earliest."),a.a.createElement("div",{className:"form"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"name"},"Name",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"text",id:"name",name:"name",spellCheck:"false",value:s,onChange:function(e){return i({type:2,payload:e.target.value})}}),e),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"_replyto"},"Email",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"email",id:"_replyto",name:"_replyto",value:d,onChange:function(e){return i({type:4,payload:e.target.value})}}),t),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"message"},"Message",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("textarea",{id:"message",name:"message",rows:"6",spellCheck:"false",value:v,onChange:function(e){return i({type:6,payload:e.target.value})}}),n),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"captcha"},"Captcha",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("div",{className:"alignTop"},a.a.createElement("img",{src:u,alt:"Captcha",className:"captchImage"}),a.a.createElement("button",{href:"#",onClick:function(){return function(e){Ie(e)}(i)}},a.a.createElement("img",{alt:"refresh",src:"/images/refresh.png"}))),a.a.createElement("input",{type:"text",id:"captcha",name:"captcha",value:b,onChange:function(e){return i({type:8,payload:e.target.value})}}),o),a.a.createElement("div",{className:"buttonfield"},a.a.createElement("button",{className:"submit",type:"submit",onClick:function(){return function(e,t){return Me.apply(this,arguments)}(i,{contactUs:{name:s,email:d,message:v},captcha:b,captchaString:E})}},"Send"))))}function Ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(n),!0).forEach((function(t){ge()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var De=a.a.createContext(),ze=a.a.createContext(),$e={userName:"",password:"",firstName:"",lastName:"",retypePassword:"",auth:void 0,forgotPasswordCaptcha:"",signUpCaptcha:"",forgotPasswordCaptchaDetails:void 0,signUpCaptchaDetails:void 0,resetCaptcha:"",resetCaptchaDetails:void 0};function Be(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:$e,t=arguments.length>1?arguments[1]:void 0;if(t&&t.type)switch(t.type){case 1:return Ae(Ae({},e),{},{userName:t.payload});case 13:return Ae(Ae({},e),{},{firstName:t.payload});case 14:return Ae(Ae({},e),{},{lastName:t.payload});case 2:return Ae(Ae({},e),{},{password:t.payload});case 15:return Ae(Ae({},e),{},{retypePassword:t.payload});case 8:return Ae(Ae({},e),{},{forgotPasswordCaptcha:t.payload});case 9:return Ae(Ae({},e),{},{signUpCaptcha:t.payload});case 10:return Ae(Ae({},e),{},{forgotPasswordCaptchaDetails:t.payload});case 18:return Ae(Ae({},e),{},{resetCaptcha:t.payload});case 17:return Ae(Ae({},e),{},{resetCaptchaDetails:t.payload});case 11:return Ae(Ae({},e),{},{signUpCaptchaDetails:t.payload});case 3:return Ae(Ae({},e),{},{auth:t.payload,userName:"",password:""});case 4:case 6:return $e;case 7:var n=Ae({},e);return n.userName?delete n.userNameError:n.userNameError="User name cannot be empty.",n.forgotPasswordCaptcha?delete n.forgotPasswordCaptchaError:n.forgotPasswordCaptchaError="Captcha cannot be empty.",n;case 5:var r=Ae({},e);return r.userName?delete r.userNameError:r.userNameError="User name cannot be empty.",r.password?delete r.password:r.passwordError="Password cannot be empty.",r;case 16:var a=Ae({},e);return a.userName?delete a.userNameError:a.userNameError="User name cannot be empty.",a.password?delete a.passwordError:a.passwordError="Password cannot be empty.",a.password!==a.retypePassword?a.retypePasswordError="Password should match with retyped password.":delete a.retypePasswordError,a.resetCaptcha?delete a.resetCaptchaCaptchaError:a.resetCaptchaCaptchaError="Captcha cannot be empty.",a;case 12:var o=Ae({},e);return o.userName?delete o.userNameError:o.userNameError="User name cannot be empty.",o.password?delete o.passwordError:o.passwordError="Password cannot be empty.",o.password!==o.retypePassword?o.retypePasswordError="Password should match with retyped password.":delete o.retypePasswordError,o.firstName?delete o.firstNameError:o.firstNameError="First name cannot be empty.",o.lastName?delete o.lastNameError:o.lastNameError="Last name cannot be empty.",o.signUpCaptcha?delete o.signUpCaptchaError:o.signUpCaptchaError="Captcha cannot be empty.",o;default:return e}}function Ve(e){var t=e.children,n=a.a.useReducer(Be,$e),r=ve()(n,2),o=r[0],i=r[1];return a.a.createElement(De.Provider,{value:o},a.a.createElement(ze.Provider,{value:i},t))}function He(){var e=a.a.useContext(De);if(!e)throw new Error("Unable create context for login context. Please use in components wrapped in LoginContextProvider.");return e}function We(){var e=a.a.useContext(ze);if(!e)throw new Error("Unable create context for login context. Please use in components wrapped in LoginContextProvider.");return e}function Qe(e){return Ke.apply(this,arguments)}function Ke(){return(Ke=me()(pe.a.mark((function e(t){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.post("/api/security/authenticate",t));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function qe(e,t,n){return Ge.apply(this,arguments)}function Ge(){return(Ge=me()(pe.a.mark((function e(t,n,r){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.get("/api/security/user/resetPasswordMail",{params:{userId:t,captcha:n,captchaString:r}}));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ye(e){return Xe.apply(this,arguments)}function Xe(){return(Xe=me()(pe.a.mark((function e(t){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.post("/api/security/user/resetPassword",t));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Je(e){return Ze.apply(this,arguments)}function Ze(){return(Ze=me()(pe.a.mark((function e(t){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.post("/api/registration",t));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function et(e,t){return tt.apply(this,arguments)}function tt(){return(tt=me()(pe.a.mark((function e(t,n){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Ne.a.get("/api/security/user/activateUser",{params:{userId:t,activationCode:n}}));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function nt(){return(nt=me()(pe.a.mark((function e(t,n){var r,a;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.userName&&n.password){e.next=3;break}return t({type:5}),e.abrupt("return");case 3:return e.next=5,Qe({userId:n.userName,password:n.password});case 5:r=e.sent,a=r.data.data,t({type:3,payload:a});case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function rt(e){var t=He(),n=t.userName,r=t.password,o=t.userNameError,i=t.passwordError,l=We(),u=o?a.a.createElement("div",{className:"errorMessage"},o):void 0,c=i?a.a.createElement("div",{className:"errorMessage"},i):void 0;return a.a.createElement("div",{className:"form"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"userName"},"User name / Email ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"email",id:"userName",name:"userName",spellCheck:"false",value:n,onChange:function(e){return l({type:1,payload:e.target.value})}}),u),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"password"},"Password ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"password",id:"password",name:"password",spellCheck:"false",value:r,onChange:function(e){return l({type:2,payload:e.target.value})}}),c),a.a.createElement("div",{className:"buttonfield"},a.a.createElement("button",{className:"submit",type:"submit",onClick:function(){return function(e,t){return nt.apply(this,arguments)}(l,{userName:n,password:r})}},"Login")),a.a.createElement("div",{className:"links"},a.a.createElement("button",{onClick:function(){return e.onModeChange(2)}},"forgot password"),a.a.createElement("button",{onClick:function(){return e.onModeChange(4)}},"sign up a new user")))}function at(){return(at=me()(pe.a.mark((function e(t,n,r,a){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n&&r){e.next=3;break}return t({type:7}),e.abrupt("return");case 3:return e.prev=3,e.next=6,qe(n,r,a);case 6:t({type:6});case 7:return e.prev=7,lt(t),e.finish(7);case 10:case"end":return e.stop()}}),e,null,[[3,,7,10]])})))).apply(this,arguments)}function ot(e){return it.apply(this,arguments)}function it(){return(it=me()(pe.a.mark((function e(t){var n,r,a;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oe();case 2:n=e.sent,r=n.data,a=(r=void 0===r?{}:r).data,t({type:10,payload:a});case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function lt(e){ot(e)}function ut(e){var t=He(),n=t.userName,o=t.userNameError,i=t.forgotPasswordCaptcha,l=t.forgotPasswordCaptchaError,u=t.forgotPasswordCaptchaDetails,c=(u=void 0===u?{}:u).captchaString,s=u.captchaImageURL,f=We();Object(r.useEffect)((function(){ot(f)}),[]);var p=o?a.a.createElement("div",{className:"errorMessage"},o):void 0,d=l?a.a.createElement("div",{className:"errorMessage"},l):void 0;return a.a.createElement("div",{className:"form"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"userName"},"User name / Email ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"email",id:"userName",name:"userName",spellCheck:"false",value:n,onChange:function(e){return f({type:1,payload:e.target.value})}}),p),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"captcha"},"Captcha ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("div",{className:"alignTop"},a.a.createElement("img",{src:s,alt:"Captcha",className:"captchImage"}),a.a.createElement("button",{href:"#",onClick:function(){return lt(f)}},a.a.createElement("img",{alt:"refresh",src:"/images/refresh.png"}))),a.a.createElement("input",{type:"text",id:"captcha",name:"captcha",spellCheck:"false",value:i,onChange:function(e){return f({type:8,payload:e.target.value})}}),d),a.a.createElement("div",{className:"buttonfield"},a.a.createElement("button",{className:"submit",type:"submit",onClick:function(){return function(e,t,n,r){return at.apply(this,arguments)}(f,n,i,c)}},"Forgot Password")),a.a.createElement("div",{className:"links"},a.a.createElement("button",{onClick:function(){return e.onModeChange(1)}},"login")))}function ct(){return(ct=me()(pe.a.mark((function e(t,n){var r,a,o,i,l,u,c;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.user,a=r.email,o=r.password,i=r.retypePassword,l=r.firstName,u=r.lastName,c=n.captcha,a&&c&&o&&i&&l&&u&&o===i){e.next=4;break}return t({type:12}),e.abrupt("return");case 4:return e.prev=4,e.next=7,Je(n);case 7:t({type:6});case 8:return e.prev=8,pt(t),e.finish(8);case 11:case"end":return e.stop()}}),e,null,[[4,,8,11]])})))).apply(this,arguments)}function st(e){return ft.apply(this,arguments)}function ft(){return(ft=me()(pe.a.mark((function e(t){var n,r,a;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oe();case 2:n=e.sent,r=n.data,a=(r=void 0===r?{}:r).data,t({type:11,payload:a});case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function pt(e){st(e)}function dt(e){var t=He(),n=t.userName,o=t.userNameError,i=t.password,l=t.passwordError,u=t.retypePassword,c=t.retypePasswordError,s=t.firstName,f=t.firstNameError,p=t.lastName,d=t.lastNameError,m=t.signUpCaptcha,h=t.signUpCaptchaCaptchaError,v=t.signUpCaptchaDetails,y=(v=void 0===v?{}:v).captchaString,g=v.captchaImageURL,b=We();Object(r.useEffect)((function(){st(b)}),[]);var w=o?a.a.createElement("div",{className:"errorMessage"},o):void 0,E=l?a.a.createElement("div",{className:"errorMessage"},l):void 0,x=c?a.a.createElement("div",{className:"errorMessage"},c):void 0,k=f?a.a.createElement("div",{className:"errorMessage"},f):void 0,T=d?a.a.createElement("div",{className:"errorMessage"},d):void 0,C=h?a.a.createElement("div",{className:"errorMessage"},h):void 0;return a.a.createElement("div",{className:"signUp form"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"userName"},"User name / Email ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"email",id:"userName",name:"userName",spellCheck:"false",value:n,onChange:function(e){return b({type:1,payload:e.target.value})}}),w),a.a.createElement("div",{className:"twoFields"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"password"},"Password ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"password",id:"password",name:"password",spellCheck:"false",value:i,onChange:function(e){return b({type:2,payload:e.target.value})}}),E),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"retypePassword"},"Re-type Password ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"password",id:"retypePassword",name:"retypePassword",spellCheck:"false",value:u,onChange:function(e){return b({type:15,payload:e.target.value})}}),x)),a.a.createElement("div",{className:"twoFields"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"firstName"},"First name ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"text",id:"firstName",name:"firstName",spellCheck:"false",value:s,onChange:function(e){return b({type:13,payload:e.target.value})}}),k),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"lastName"},"Last name ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"text",id:"lastName",name:"lastName",spellCheck:"false",value:p,onChange:function(e){return b({type:14,payload:e.target.value})}}),T)),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"captcha"},"Captcha ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("div",{className:"alignTop"},a.a.createElement("img",{src:g,alt:"Captcha",className:"captchImage"}),a.a.createElement("button",{href:"#",onClick:function(){return pt(b)}},a.a.createElement("img",{alt:"refresh",src:"/images/refresh.png"}))),a.a.createElement("input",{type:"text",id:"captcha",name:"captcha",spellCheck:"false",value:m,onChange:function(e){return b({type:9,payload:e.target.value})}}),C),a.a.createElement("div",{className:"buttonfield"},a.a.createElement("button",{className:"submit",type:"submit",onClick:function(){return function(e,t){return ct.apply(this,arguments)}(b,{user:{email:n,password:i,retypePassword:u,firstName:s,lastName:p},captcha:m,captchaString:y})}},"SIGN UP")),a.a.createElement("div",{className:"links"},a.a.createElement("button",{onClick:function(){return e.onModeChange(1)}},"login")))}function mt(){return(mt=me()(pe.a.mark((function e(t,n,r){var a,o;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=r.password,o=r.retypePassword,r.captcha&&a&&o&&a===o){e.next=4;break}return t({type:16}),e.abrupt("return");case 4:return e.prev=4,e.next=7,Ye(r);case 7:t({type:6}),n.push("/demo");case 9:return e.prev=9,yt(t),e.finish(9);case 12:case"end":return e.stop()}}),e,null,[[4,,9,12]])})))).apply(this,arguments)}function ht(e){return vt.apply(this,arguments)}function vt(){return(vt=me()(pe.a.mark((function e(t){var n,r,a;return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oe();case 2:n=e.sent,r=n.data,a=(r=void 0===r?{}:r).data,t({type:17,payload:a});case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function yt(e){ht(e)}function gt(e){var t=e.userName,n=e.resetPasswordString,o=He(),i=o.password,l=o.passwordError,u=o.retypePassword,c=o.retypePasswordError,s=o.resetCaptcha,f=o.resetCaptchaCaptchaError,p=o.resetCaptchaDetails,d=(p=void 0===p?{}:p).captchaString,m=p.captchaImageURL,h=We();Object(r.useEffect)((function(){ht(h)}),[]);var v=G(),y=l?a.a.createElement("div",{className:"errorMessage"},l):void 0,g=c?a.a.createElement("div",{className:"errorMessage"},c):void 0,b=f?a.a.createElement("div",{className:"errorMessage"},f):void 0;return a.a.createElement("div",{className:"signUp form"},a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"userName"},"User name / Email ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"email",id:"userName",name:"userName",spellCheck:"false",value:t})),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"password"},"Password ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"password",id:"password",name:"password",spellCheck:"false",value:i,onChange:function(e){return h({type:2,payload:e.target.value})}}),y),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"retypePassword"},"Re-type Password ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("input",{type:"password",id:"retypePassword",name:"retypePassword",spellCheck:"false",value:u,onChange:function(e){return h({type:15,payload:e.target.value})}}),g),a.a.createElement("div",{className:"field"},a.a.createElement("label",{htmlFor:"captcha"},"Captcha ",a.a.createElement("span",{className:"mandatory"},"*")),a.a.createElement("div",{className:"alignTop"},a.a.createElement("img",{src:m,alt:"Captcha",className:"captchImage"}),a.a.createElement("button",{href:"#",onClick:function(){return yt(h)}},a.a.createElement("img",{alt:"refresh",src:"/images/refresh.png"}))),a.a.createElement("input",{type:"text",id:"captcha",name:"captcha",spellCheck:"false",value:s,onChange:function(e){return h({type:18,payload:e.target.value})}}),b),a.a.createElement("div",{className:"buttonfield"},a.a.createElement("button",{className:"submit",type:"submit",onClick:function(){return function(e,t,n){return mt.apply(this,arguments)}(h,v,{userId:t,password:i,retypePassword:u,resetPasswordString:n,captcha:s,captchaString:d})}},"RESET PASSWORD")))}function bt(e){var t=e.emailId,n=e.resetPasswordString,o=Object(r.useState)(t&&n?8:1),i=ve()(o,2),l=i[0],u=i[1],c=void 0;return c=4===l?a.a.createElement(dt,{onModeChange:function(e){return u(e)}}):2===l?a.a.createElement(ut,{onModeChange:function(e){return u(e)}}):8===l?a.a.createElement(gt,{userName:t,resetPasswordString:n}):a.a.createElement(rt,{onModeChange:function(e){return u(e)}}),a.a.createElement("div",{className:"loginBack"},a.a.createElement("div",{className:"login"},a.a.createElement("div",{className:"loginLeft"},a.a.createElement("div",{className:"title"},"KINETIC INSTRUCTION RUNTIME"),a.a.createElement("div",{className:"smallRect"})),a.a.createElement("div",{className:"loginRight"},a.a.createElement("img",{className:"loginLogo",src:"/images/logok.png",alt:"Logo big"}),c)))}function wt(){return He().auth?a.a.createElement("div",null):a.a.createElement(bt,null)}function Et(e){return a.a.createElement("div",{className:"bigTitle"},a.a.createElement("div",{className:"".concat(e.styleClassName,"rect rect")}," "),a.a.createElement("div",{className:"title"},"KINETIC INSTRUCTION RUNTIME"))}function xt(e){return a.a.createElement("div",{className:"".concat(e.isDemo?"demoLogo ":"","logo")},a.a.createElement("a",{href:"/"},a.a.createElement("img",{src:"/images/logoksmall.png",alt:"logo"})))}var kt=n(26),Tt=n.n(kt);function Ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function St(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ct(Object(n),!0).forEach((function(t){ge()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pt=a.a.createContext(),Nt=a.a.createContext(),Ot=[];function _t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ot,t=arguments.length>1?arguments[1]:void 0;if(t&&t.type)switch(t.type){case 1:return t.payload?[St(St({},t.payload),{},{when:Date.now()})].concat(Tt()(e)):e;case 2:return e.filter((function(e){return e.when!==t.payload}));case 4:return e.filter((function(e){return Date.now()-e.when<1e4}));default:return e}}var Rt=void 0;function Lt(e){var t=e.children,n=a.a.useReducer(_t,Ot),r=ve()(n,2),o=r[0],i=r[1];function l(e){var t=e.data,n=t.type,r=t.message,a=t.error,o=(a=void 0===a?{}:a).errorCode,l=a.message,u=e.status,c=e.data,s=e.statusText,f=o?l:r;return!f&&(u<200||u>299)&&(n="ERROR",f=c||s),f?(i({type:1,payload:{type:n,message:f,errorCode:o}}),e):e}return Rt||(Ne.a.interceptors.response.use(l,(function(e){throw l(e.response),e})),Rt=!0),a.a.createElement(Pt.Provider,{value:o},a.a.createElement(Nt.Provider,{value:i},t))}function Mt(){var e=function(){var e=a.a.useContext(Pt);if(!e)throw new Error("Unable create context for message context. Please use in components wrapped in MessageContextProvider.");return e}(),t=function(){var e=a.a.useContext(Nt);if(!e)throw new Error("Unable create context for message context. Please use in components wrapped in MessageContextProvider.");return e}();return Object(r.useEffect)((function(){var e=setInterval((function(){return t({type:4})}),1e3);return function(){return clearInterval(e)}}),[]),a.a.createElement(a.a.Fragment,null,e.map((function(e,n){return a.a.createElement("div",{key:e.when,className:"messageContainer ".concat(e.type),style:{bottom:"".concat(80*n+15,"px")}},a.a.createElement("div",{className:"message",title:e.message},e.message?"".concat(e.message.substring(0,180),"..."):"",e.errorCode?" (".concat(e.errorCode,")"):""),a.a.createElement("div",{className:"closeButton"},a.a.createElement("button",{onClick:function(){return t({type:2,payload:e.when})}},a.a.createElement("img",{src:"/images/close.png",alt:"Remove Message"}))))})))}function It(){return(It=me()(pe.a.mark((function e(t,n){return pe.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,et(t,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function jt(e){var t=e.emailId,n=e.activationString,o=G();return Object(r.useEffect)((function(){t&&n&&(!function(e,t){It.apply(this,arguments)}(t,n),o.push("/demo"))}),[t,n]),a.a.createElement("div",{className:"fullscreenMessage title"},"Activating User ...")}function Ft(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(Y,null,a.a.createElement(K,null,a.a.createElement($,{exact:!0,path:"/"},a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(Et,{styleClassName:"home"}),a.a.createElement("div",{className:"home textContainer"},a.a.createElement(le,null)))),a.a.createElement($,{path:"/docs"},a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(Et,{styleClassName:"docs"}),a.a.createElement("div",{className:"docs textContainer"},a.a.createElement(ce,null)))),a.a.createElement($,{path:"/demo"},a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,{isDemo:!0}),a.a.createElement(xt,{isDemo:!0}),a.a.createElement(wt,null))),a.a.createElement($,{path:"/about"},a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(Et,{styleClassName:"about"}),a.a.createElement("div",{className:"about textContainer"},a.a.createElement(ue,null)))),a.a.createElement($,{path:"/contactUs"},a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(Et,{styleClassName:"contactUs"}),a.a.createElement("div",{className:"contactUs textContainer"},a.a.createElement(Se,null,a.a.createElement(Fe,null))))),a.a.createElement($,{path:"/activateUser/:emailId/:activationString",component:function(e){var t,n,r,o;return a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(jt,{emailId:null===(t=e.match)||void 0===t||null===(n=t.params)||void 0===n?void 0:n.emailId,activationString:null===(r=e.match)||void 0===r||null===(o=r.params)||void 0===o?void 0:o.activationString}))}}),a.a.createElement($,{path:"/resetPassword/:emailId/:resetPasswordString",component:function(e){var t,n,r,o;return a.a.createElement(a.a.Fragment,null,a.a.createElement(ie,null),a.a.createElement(xt,null),a.a.createElement(bt,{emailId:null===(t=e.match)||void 0===t||null===(n=t.params)||void 0===n?void 0:n.emailId,resetPasswordString:null===(r=e.match)||void 0===r||null===(o=r.params)||void 0===o?void 0:o.resetPasswordString}))}}))),a.a.createElement(Mt,null))}var Ut=document.getElementById("appdiv");Ut&&i.a.render(a.a.createElement(Lt,null,a.a.createElement(Ve,null,a.a.createElement(Ft,null))),Ut)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NpdGUvTmF2LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NpdGUvSG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaXRlL0Fib3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NpdGUvRG9jcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGV4dHMvQ29udGFjdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2NhcHRjaGFTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9jb250YWN0U2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaXRlL0NvbnRhY3RVcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGV4dHMvTG9naW5Db250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9sb2dpblNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGVtby9sb2dpbi9Mb2dpbkZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGVtby9sb2dpbi9Db25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGVtby9sb2dpbi9Gb3Jnb3RQYXNzd29yZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kZW1vL2xvZ2luL1NpZ25VcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kZW1vL2xvZ2luL0ZvcmdvdFBhc3N3b3JkUmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGVtby9sb2dpbi9Mb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kZW1vL0RlbW8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2l0ZS9MZWZ0U2lkZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zaXRlL0xvZ28uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRleHRzL01lc3NhZ2VDb250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NpdGUvTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kZW1vL2xvZ2luL0FjdGl2YXRlVXNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImFyZyIsImluZm8iLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImZuIiwic2VsZiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJzbGljZSIsImV4dGVuZCIsImEiLCJiIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJyYXlXaXRoSG9sZXMiLCJpdGVyYWJsZVRvQXJyYXlMaW1pdCIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVSZXN0IiwiYXJyIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJwdXNoIiwib2ZmIiwiZmlsdGVyIiwiaCIsInNldCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJpbmRleCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwicHJvcHMiLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJfcmVmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieCIsInkiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkFycmF5IiwiY29udGV4dFR5cGVzIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJjb21waWxlIiwib3B0aW9ucyIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwiam9pbiIsInJlcyIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJuZXh0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsImZsYWdzIiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJUeXBlRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsInRlc3QiLCJhdHRhY2hLZXlzIiwicmUiLCJrZXlzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInNvdXJjZSIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0IiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImFycmF5TGlrZVRvQXJyYXkiLCJtaW5MZW4iLCJsZW4iLCJhcnIyIiwidXRpbHMiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInYiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJpbmRleE9mIiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJFcnJvciIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsIkNhbmNlbCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY29udGV4dFR5cGUiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiZm9yIiwicSIsInUiLCJ3IiwieiIsIkEiLCJCIiwiaXRlcmF0b3IiLCJDIiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwiRiIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiY3VycmVudCIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiZyIsImsiLCJmIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJPIiwiUCIsIlEiLCJSIiwicG9wIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiUyIsIlYiLCJUIiwiVSIsImVzY2FwZSIsIlciLCJhYSIsIlgiLCJOIiwiWSIsIloiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInZlcnNpb24iLCJvbkVycm9yIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwic3R5bGUiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiV2Vha01hcCIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJoYXMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJjb250YWluZXIiLCJMYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwic2hpZnQiLCJVYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIlZjIiwiV2MiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJiZCIsImNkIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwibWQiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsImlzIiwicWQiLCJyZCIsInNkIiwidGQiLCJib2R5IiwidWQiLCJ2ZCIsIm5vZGUiLCJuZXh0U2libGluZyIsInhkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJocmVmIiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJhdXRvRm9jdXMiLCJHZCIsIl9faHRtbCIsIkhkIiwic2V0VGltZW91dCIsIklkIiwiY2xlYXJUaW1lb3V0IiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWF0aCIsInJhbmRvbSIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwidWUiLCJ3ZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwieGUiLCJ5ZSIsImNoYW5nZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJkZXRhY2hFdmVudCIsIkhlIiwiSWUiLCJhdHRhY2hFdmVudCIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwidmlldyIsIk9lIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsImNhbGxiYWNrIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwiTWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwic3RhY2siLCJCaSIsIldlYWtTZXQiLCJTZXQiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiaW5zdGFuY2UiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiZGlzcGxheSIsIlVpIiwiVmkiLCJhZGQiLCJXaSIsIlhpIiwiZWxlbWVudCIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJoaWRkZW4iLCJkZWZhdWx0Iiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJGdW5jdGlvbiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiZGVmaW5lIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwidXNlIiwiZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJyZWFzb24iLCJmbnMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwiY29sdW1uTnVtYmVyIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsIl9leHRlbmRzIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImxpc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInJlZHVjZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJtZXRob2ROYW1lIiwiU3dpdGNoIiwidXNlSGlzdG9yeSIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiIsIl9yZWYyJGNvbXBvbmVudCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJOYXZMaW5rIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsIk5hdmlnYXRlIiwiaXNEZW1vIiwicmVsIiwiSG9tZSIsImFiY2RlIiwiQWJvdXQiLCJ5ZWFyIiwicm91bmQiLCJnZXRUaW1lIiwiRG9jcyIsIkNvbnRhY3RTdGF0ZUNvbnRleHQiLCJSZWFjdCIsIkNvbnRhY3REaXNwYXRjaENvbnRleHQiLCJkZWZhdWx0U3RhdGUiLCJNQVAiLCJlcnJvcktleSIsImNvbnRhY3RSZWR1Y2VyIiwicmV0dXJuU3RhdGUiLCJDb250YWN0Q29udGV4dFByb3ZpZGVyIiwiZ2V0Q2FwdGNoYSIsInNlbmRDb250YWN0VXMiLCJjb250YWN0VXMiLCJwb3N0IiwiY2FwdGNoYSIsImdldERhdGEiLCJDb250YWN0VXMiLCJuYW1lRXJyb3JNc2ciLCJlbWFpbEVycm9yTXNnIiwibWVzc2FnZUVycm9yTXNnIiwiY2FwdGNoYUVycm9yTXNnIiwiY3R4IiwidXNlQ29udGFjdENvbnRleHREaXNwYXRjaCIsInVzZUNvbnRhY3RDb250ZXh0U3RhdGUiLCJjYXB0Y2hhSW1hZ2VVUkwiLCJuYW1lRXJyb3IiLCJlbWFpbEVycm9yIiwibWVzc2FnZUVycm9yIiwiY2FwdGNoYUVycm9yIiwiY2FwdGNoYVN0cmluZyIsImh0bWxGb3IiLCJzcGVsbENoZWNrIiwib25DaGFuZ2UiLCJyb3dzIiwic3JjIiwiYWx0IiwicmVmcmVzaENhcHRoY2EiLCJMb2dpblN0YXRlQ29udGV4dCIsIkxvZ2luRGlzcGF0Y2hDb250ZXh0IiwidXNlck5hbWUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInJldHlwZVBhc3N3b3JkIiwiZm9yZ290UGFzc3dvcmRDYXB0Y2hhIiwic2lnblVwQ2FwdGNoYSIsImZvcmdvdFBhc3N3b3JkQ2FwdGNoYURldGFpbHMiLCJzaWduVXBDYXB0Y2hhRGV0YWlscyIsInJlc2V0Q2FwdGNoYSIsInJlc2V0Q2FwdGNoYURldGFpbHMiLCJsb2dpblJlZHVjZXIiLCJ1c2VyTmFtZUVycm9yIiwiZm9yZ290UGFzc3dvcmRDYXB0Y2hhRXJyb3IiLCJwYXNzd29yZEVycm9yIiwicmV0eXBlUGFzc3dvcmRFcnJvciIsInJlc2V0Q2FwdGNoYUNhcHRjaGFFcnJvciIsImZpcnN0TmFtZUVycm9yIiwibGFzdE5hbWVFcnJvciIsInNpZ25VcENhcHRjaGFFcnJvciIsIkxvZ2luQ29udGV4dFByb3ZpZGVyIiwidXNlTG9naW5Db250ZXh0U3RhdGUiLCJ1c2VMb2dpbkNvbnRleHREaXNwYXRjaCIsImxvZ2luIiwibG9naW5Cb2R5IiwiZm9yZ290UGFzc3dvcmQiLCJ1c2VySWQiLCJmb3Jnb3RQYXNzd29yZFJlc2V0IiwicmVzZXRCb2R5Iiwic2lnblVwVXNlciIsInVzZXJCb2R5IiwiYWN0aXZhdGVVc2VyIiwiYWN0aXZhdGlvbkNvZGUiLCJMb2dpbkZvcm0iLCJ1c2VyTmFtZUVycm9yQ29tcG9uZW50IiwicGFzc3dvcmRFcnJvckNvbXBvbmVudCIsImxvZ2luTm93Iiwib25Nb2RlQ2hhbmdlIiwiZm9yZ290UGFzc3dvcmRTZXJ2aWNlQ2FsbCIsIkZvcmdvdFBhc3N3b3JkIiwiY2FwdGNoYUVycm9yQ29tcG9uZW50IiwidXNlciIsInNpZ25VcFVzZXJTZXJ2aWNlIiwic2lnblVwQ2FwdGNoYUNhcHRjaGFFcnJvciIsInJldHlwZVBhc3N3b3JkRXJyb3JDb21wb25lbnQiLCJmaXJzdE5hbWVFcnJvckNvbXBvbmVudCIsImxhc3ROYW1lRXJyb3JDb21wb25lbnQiLCJzaWduVXBVc2VyTG9jYWwiLCJyZXNldFJlcXVlc3QiLCJGb3Jnb3RQYXNzd29yZFJlc2V0IiwicmVzZXRQYXNzd29yZFN0cmluZyIsInJlc2V0UGFzc3dvcmRMb2NhbCIsIkxvZ2luIiwiZW1haWxJZCIsImN1cnJlbnRNb2RlIiwic2V0Q3VycmVudE1vZGUiLCJjdXJyZW50Q29tcG9uZW50IiwiTGVmdFNpZGUiLCJzdHlsZUNsYXNzTmFtZSIsIkxvZ28iLCJNZXNzYWdlU3RhdGVDb250ZXh0IiwiTWVzc2FnZURpc3BhdGNoQ29udGV4dCIsIm1lc3NhZ2VSZWR1Y2VyIiwid2hlbiIsInJlZ2lzdGVyZWQiLCJNZXNzYWdlQ29udGV4dFByb3ZpZGVyIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwibXNnIiwiTWVzc2FnZSIsIm1lc3NhZ2VzIiwidXNlTWVzc2FnZUNvbnRleHRTdGF0ZSIsInVzZU1lc3NhZ2VDb250ZXh0RGlzcGF0Y2giLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJib3R0b20iLCJhY3RpdmF0aW9uU3RyaW5nIiwiYWN0aXZhdGVVc2VyU2VydmljZSIsIkFjdGl2YXRlVXNlciIsIkFwcCIsIndyYXBwZXIiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFB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QkFBbUIsVUFBRXgzRCxFQUFNeUYsYUFBUixpQkFBRSxFQUFhOEIsY0FBZixhQUFFLEVBQXFCaXdELDRCQU90RCxrQkFBQ21CLEdBQUQsT0MzRk4sSUFBTVcsR0FBVXI4RCxTQUFTczhELGVBQWUsVUFDeENELElBQ0lFLElBQVMvNEQsT0FDUCxrQkFBQzgzRCxHQUFELEtBQ0Usa0JBQUM3QyxHQUFELEtBQ0Usa0JBQUMyRCxHQUFELFFBR0pDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2MCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheVwiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknLCAncGFyYW1zJ107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3RpbWVvdXRNZXNzYWdlJywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ2RlY29tcHJlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ21heEJvZHlMZW5ndGgnLCAnbWF4UmVkaXJlY3RzJywgJ3RyYW5zcG9ydCcsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnLCAncmVzcG9uc2VFbmNvZGluZydcbiAgXTtcbiAgdmFyIGRpcmVjdE1lcmdlS2V5cyA9IFsndmFsaWRhdGVTdGF0dXMnXTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkaXJlY3RNZXJnZUtleXMsIGZ1bmN0aW9uIG1lcmdlKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cylcbiAgICAuY29uY2F0KGRpcmVjdE1lcmdlS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzEpXG4gICAgLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTMuMVwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheVwiKTtcblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlczsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2aWdhdGUocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPG5hdiBjbGFzc05hbWU9e3Byb3BzLmlzRGVtbyA/IFwiZGVtb05hdlwiIDogXCJcIn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9tZVwiPlxuICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IHRvPVwiL1wiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZUxpbmtcIj5cbiAgICAgICAgICAgIEhPTUVcbiAgICAgICAgICA8L05hdkxpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdpdGh1YlwiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2trZGF0a2lyYW4vS0lSdW5cIlxuICAgICAgICAgICAgcmVsPVwibm9yZWZlcnJlclwiXG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEdJVEhVQlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZG9jc1wiPlxuICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2RvY3NcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVMaW5rXCI+XG4gICAgICAgICAgICBET0NTXG4gICAgICAgICAgPC9OYXZMaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZW1vXCI+XG4gICAgICAgICAgPE5hdkxpbmsgdG89XCIvZGVtb1wiIGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZUxpbmtcIj5cbiAgICAgICAgICAgIERFTU9cbiAgICAgICAgICA8L05hdkxpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFib3V0XCI+XG4gICAgICAgICAgPE5hdkxpbmsgdG89XCIvYWJvdXRcIiBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVMaW5rXCI+XG4gICAgICAgICAgICBBQk9VVFxuICAgICAgICAgIDwvTmF2TGluaz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFjdFVzXCI+XG4gICAgICAgICAgPE5hdkxpbmsgdG89XCIvY29udGFjdFVTXCIgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlTGlua1wiPlxuICAgICAgICAgICAgQ09OVEFDVFxuICAgICAgICAgIDwvTmF2TGluaz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L25hdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtwcm9wcy5pc0RlbW8gPyBcImRlbW8gZm9vdGVyXCIgOiBcImZvb3RlclwifT5cbiAgICAgICAgVGhlIGNvbnRlbnRzIG9mIHRoaXMgd2Vic2l0ZSBhbmQgdGhlIEdpdEh1YiByZXBvc2l0b3J5IGFyZSB1bmRlciB0aGUgTUlUXG4gICAgICAgIExpY2Vuc2UuICZjb3B5OzIwMjBcbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICBjb25zdCBzYW1wbGUgPSB7IGFiY2RlOiAyLCB2YWx1ZTogMyB9O1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aDE+V2hhdCBpcyBLaW5ldGljIEluc3RydWN0aW9uIFJ1bnRpbWUgKEtJUlVOKT88L2gxPlxuICAgICAgPHA+XG4gICAgICAgIDxiciAvPlxuICAgICAgICBLSVJVTiwgaW4gc2ltcGxlIHRlcm1zLCBpcyBhIHRvb2xzZXQgb3IgYW4gZW50cnkgcG9pbnQgdG8gYnVpbGQgYVxuICAgICAgICBuby1jb2RlIG9yIGxvdyBjb2RlIHBsYXRmb3JtLlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIEV2ZXJ5IGFwcGxpY2F0aW9uIGF0IG9uZSBwb2ludCBpbiB0aW1lIG5lZWRzIHRvIHN1cHBseSBjdXN0b21pemF0aW9uIGZvclxuICAgICAgICBlYWNoIGNsaWVudC4gVGhlcmUgYXJlIG5vIHNldCBydWxlcyBvciBwcm9kdWN0cyByZWFkaWx5IGF2YWlsYWJsZSB0byB0aGVcbiAgICAgICAgZGV2ZWxvcGVyIHRvIGludGVncmF0ZSB3aXRob3V0IGhhdmluZyB0byBqdW1wIHRocm91Z2ggYSBsb3Qgb2YgaG9vcHMuXG4gICAgICAgIEhlcmUgSSBhbSBidWlsZGluZyB0aGlzIHByb2R1Y3QgdG8gc3VwcGx5IHRoZSB0b29sc2V0IHRvIGVuYWJsZSBlbmQtdXNlclxuICAgICAgICB0byBlYXNpbHkgY2hhbmdlIGxvZ2ljIHdpdGhvdXQgbmVlZGluZyB0byBoYXZlIHByb2dyYW1taW5nIGtub3dsZWRnZVxuICAgICAgICB3aXRoIHRoZSBtaW5pbWFsIGRldmVsb3BtZW50IGVmZm9ydC5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxiciAvPlxuICAgICAgICBUaGUgaWRlYSBoZXJlIGlzIHRvIHN1cHBseSBhIHNldCBvZiBpbnN0cnVjdGlvbnMgaW4gSlNPTiBmb3JtYXQgYW5kXG4gICAgICAgIGV4ZWN1dGUgdGhlbS4gVGhlIGhlYXJ0IG9mIHRoaXMgcHJvZHVjdCBpcyB0byBkZWZpbmUgYSBzY2hlbWEgZGVmaW5pdGlvblxuICAgICAgICBmb3IgdGhlIEpTT04gZm9ybWF0dGVkIGluc3RydWN0aW9ucyBhbmQgYW4gZW5naW5lIHRvIHJ1biB0aGVtLiBBbHNvLCBhXG4gICAgICAgIFVJIHRvb2wgd2hpY2ggY2FuIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSBpbnN0cnVjdGlvbiBzZXQgYW5kIGVhc2lseVxuICAgICAgICBpbnRlZ3JhdGVkIGludG8gYW55IHdlYiBhcHBsaWNhdGlvbi5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxiciAvPlxuICAgICAgPC9wPlxuICAgICAgPGgyPkV4YW1wbGU8L2gyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJqc29uXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyXCI+XG4gICAgICAgICAgR2VuZXJhdGUgZmlib25hY2NpIG51bWJlcnMgYW5kIHJldHVybiB0aGVtLlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+e0pTT04uc3RyaW5naWZ5KHNhbXBsZSwgbnVsbCwgMil9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxwPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgVG8gdW5kZXJzdGFuZCBiZXR0ZXIsIHBsZWFzZSBjaGVja291dCB0aGUgZGVtby5cbiAgICAgIDwvcD5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWJvdXQoKSB7XG4gIGNvbnN0IHllYXIgPSBNYXRoLnJvdW5kKFxuICAgIChEYXRlLm5vdygpIC0gbmV3IERhdGUoXCJOb3ZlbWJlciA3LCAyMDA1IDA5OjAwOjAwXCIpLmdldFRpbWUoKSkgL1xuICAgICAgKDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDApXG4gICk7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMT5BQk9VVDwvaDE+XG4gICAgICA8cD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIE15IG5hbWUgaXMgPGI+S2lyYW4gR3JhbmRoaTwvYj4uIEkgaGF2ZSBiZWVuIGRldmVsb3BpbmcgYXBwbGljYXRpb25zIGZvcntcIiBcIn1cbiAgICAgICAge3llYXJ9IHllYXJzIGluIHZhcmlvdXMgZG9tYWlucyBvbiBtdWx0aXBsZSBwbGF0Zm9ybXMsIGFsbCBhbG9uZyBJIGhhZFxuICAgICAgICB0cm91YmxlIHByb3ZpZGluZyBhIHdpbmRvdyBmb3IgYW4gZW5kLXVzZXIgdG8gZWRpdCBhIHBpZWNlIG9mIGxvZ2ljIGhlcmVcbiAgICAgICAgb3IgdGhlcmUuIEkgcmVjZW50bHkgaGFkIGEgbG90IG9mIHRpbWUgdG8gdGhpbmtrIHdoaWxlIHJlY292ZXJpbmcgZnJvbVxuICAgICAgICBDT1ZJRC0xOSB3aGlsZSBseWluZyBvbiB0aGUgYmVkLiBJdCBnYXZlIG1lIGEgdGhvdWdodCBhYm91dCB3aHkgbm90XG4gICAgICAgIGRlZmluZSBsYW5ndWFnZSBzaW1wbGUgZW5vdWdoIHRvIGJ1aWxkIGluIEpTT04uXG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgVGhlIG9iamVjdGl2ZSBvZiB0aGlzIGRlY2VwdGl2ZWx5IHNpbXBsZSBpbml0YXRpdmUgaXMgdG8gdW5kZXJzdGFuZCB0aGVcbiAgICAgICAgc3RydWN0dXJlZCBKU09OIGlucHV0IGFuZCBleGVjdXRlIGl0IGFzIGluc3RydWN0aW9ucyBvZiBhIHByb2dyYW0uIE1vcmVcbiAgICAgICAgeW91IHB1dCB5b3VyIHRob3VnaHQgYWJvdXQgaXQsIHRoZSBtb3JlIGZhc2NpbmF0aW5nIGl0IGFwcGVhcnMgYW5kXG4gICAgICAgIGJlY29tZXMuIEFuIHVuc3RydWN0dXJlZCB0ZXh0IGNhbGxlZCBhIHByb2dyYW0gZmVkIHRvIGFuIGludGVycHJldGVyIG9yXG4gICAgICAgIGEgY29tcGlsZXIgaXQgc3RhcnRzIGJyZWFraW5nIGl0IGludG8gbWVhbmluZ2Z1bCB0b2tlbnMgYW5kIHRyeSB0b1xuICAgICAgICBleGVjdXRlLiBIZXJlIHRyeWluZyB0byBrZWVwIGl0IHNpbXBsZSB1c2luZyBhIHN0cnVjdHVyZWQgSlNPTiBtYXAgd2l0aFxuICAgICAgICBwcmUtZGVmaW5lZCBvcGVyYXRpb25zLiBBIHVzZXIgY2FuIGVhc2lseSBlZGl0IHRoaXMgSlNPTiB3aXRoIGEgc2ltcGxlXG4gICAgICAgIHZpc3VhbCB0b29sIHRvIGNoYW5nZSB0aGUgY291cnNlIG9mIGV4ZWN1dGlvbiBsb2dpYy5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxiciAvPlxuICAgICAgICBUaGlzIGluaXRhdGl2ZSB3aWxsIGJlIG1hbmFnZWQgYnkgZmV3IHBlb3BsZSB0byBzaG93Y2FzZSB0aGUgaWRlYS4gVGhlXG4gICAgICAgIGNvZGUgd2lsbCBiZSBhdmFpbGFibGUgaW4gdGhlIHJlcG9zaXRvcnkgZm9yIG90aGVycyB0byBhY2Nlc3NkIGFuZCBydW5cbiAgICAgICAgYW5kIHNlZSBhbmQgdXNlIHRoZSBjb2RlIHdoZXJlIGFuZCB3aGVuIHdhbnRlZC4gTWF5YmUsIGxhdGVyIHdlIHNoYWxsXG4gICAgICAgIG1ha2UgaXQgYXMgYSBsaWJyYXJ5IHRvIGJlIHVzZWQgYXMgYSBtb2R1bGUuXG4gICAgICA8L3A+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERvY3MoKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMT5ET0NVTUVOVEFUSU9OPC9oMT5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgQ29udGFjdFN0YXRlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbmNvbnN0IENvbnRhY3REaXNwYXRjaENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5jb25zdCBkZWZhdWx0U3RhdGUgPSB7fTtcblxuY29uc3QgQUREX0NBUFRDSEFfSU5GTyA9IDE7XG5jb25zdCBOQU1FX0NIQU5HRSA9IDI7XG5jb25zdCBFTUFJTF9DSEFOR0UgPSA0O1xuY29uc3QgTUVTU0FHRV9DSEFOR0UgPSA2O1xuY29uc3QgQ0FQVENIQV9DSEFOR0UgPSA4O1xuY29uc3QgVkFMSURBVEVfRk9STSA9IDE2O1xuY29uc3QgQ0xFQVJfRk9STSA9IDMyO1xuXG5jb25zdCBNQVAgPSB7XG4gIFtOQU1FX0NIQU5HRV06IHsga2V5OiBcIm5hbWVcIiwgZXJyb3JLZXk6IFwibmFtZUVycm9yXCIsIHRpdGxlOiBcIk5hbWVcIiB9LFxuICBbRU1BSUxfQ0hBTkdFXTogeyBrZXk6IFwiZW1haWxcIiwgZXJyb3JLZXk6IFwiZW1haWxFcnJvclwiLCB0aXRsZTogXCJFbWFpbFwiIH0sXG4gIFtNRVNTQUdFX0NIQU5HRV06IHtcbiAgICBrZXk6IFwibWVzc2FnZVwiLFxuICAgIGVycm9yS2V5OiBcIm1lc3NhZ2VFcnJvclwiLFxuICAgIHRpdGxlOiBcIk1lc3NhZ2VcIixcbiAgfSxcbiAgW0NBUFRDSEFfQ0hBTkdFXToge1xuICAgIGtleTogXCJjYXB0Y2hhXCIsXG4gICAgZXJyb3JLZXk6IFwiY2FwdGNoYUVycm9yXCIsXG4gICAgdGl0bGU6IFwiQ2FwdGNoYVwiLFxuICB9LFxufTtcblxuZnVuY3Rpb24gY29udGFjdFJlZHVjZXIoc3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbikge1xuICBpZiAoIWFjdGlvbikgcmV0dXJuIHN0YXRlO1xuICBpZiAoIWFjdGlvbi50eXBlKSByZXR1cm4gc3RhdGU7XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUREX0NBUFRDSEFfSU5GTzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuICAgIGNhc2UgVkFMSURBVEVfRk9STToge1xuICAgICAgbGV0IHMgPSB7IC4uLnN0YXRlIH07XG4gICAgICBPYmplY3QudmFsdWVzKE1BUCkuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoc1tlLmtleV0pIHtcbiAgICAgICAgICBkZWxldGUgc1tlLmVycm9yS2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzW2UuZXJyb3JLZXldID0gZS50aXRsZSArIFwiIGNhbm5vdCBiZSBlbXB0eS5cIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgY2FzZSBOQU1FX0NIQU5HRTpcbiAgICBjYXNlIEVNQUlMX0NIQU5HRTpcbiAgICBjYXNlIE1FU1NBR0VfQ0hBTkdFOlxuICAgIGNhc2UgQ0FQVENIQV9DSEFOR0U6IHtcbiAgICAgIGxldCBrZXkgPSBNQVBbYWN0aW9uLnR5cGVdLmtleTtcbiAgICAgIGxldCBlcnJvcktleSA9IE1BUFthY3Rpb24udHlwZV0uZXJyb3JLZXk7XG4gICAgICBsZXQgcmV0dXJuU3RhdGUgPSB7IC4uLnN0YXRlLCBba2V5XTogYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm5TdGF0ZVtlcnJvcktleV0gPSBNQVBbYWN0aW9uLnR5cGVdLnRpdGxlICsgXCIgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHJldHVyblN0YXRlW2Vycm9yS2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXR1cm5TdGF0ZTtcbiAgICB9XG4gICAgY2FzZSBDTEVBUl9GT1JNOlxuICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIENvbnRhY3RDb250ZXh0UHJvdmlkZXIoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcihjb250YWN0UmVkdWNlciwgZGVmYXVsdFN0YXRlKTtcblxuICByZXR1cm4gKFxuICAgIDxDb250YWN0U3RhdGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+XG4gICAgICA8Q29udGFjdERpc3BhdGNoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZGlzcGF0Y2h9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0NvbnRhY3REaXNwYXRjaENvbnRleHQuUHJvdmlkZXI+XG4gICAgPC9Db250YWN0U3RhdGVDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5mdW5jdGlvbiB1c2VDb250YWN0Q29udGV4dFN0YXRlKCkge1xuICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KENvbnRhY3RTdGF0ZUNvbnRleHQpO1xuICBpZiAoIWN0eClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSBjcmVhdGUgY29udGV4dCBmb3IgY29udGFjdCBjb250ZXh0LiBQbGVhc2UgdXNlIGluIGNvbXBvbmVudHMgd3JhcHBlZCBpbiBDb250YWN0Q29udGV4dFByb3ZpZGVyLlwiXG4gICAgKTtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlQ29udGFjdENvbnRleHREaXNwYXRjaCgpIHtcbiAgY29uc3QgY3R4ID0gUmVhY3QudXNlQ29udGV4dChDb250YWN0RGlzcGF0Y2hDb250ZXh0KTtcbiAgaWYgKCFjdHgpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJVbmFibGUgY3JlYXRlIGNvbnRleHQgZm9yIGNvbnRhY3QgY29udGV4dC4gUGxlYXNlIHVzZSBpbiBjb21wb25lbnRzIHdyYXBwZWQgaW4gQ29udGFjdENvbnRleHRQcm92aWRlci5cIlxuICAgICk7XG4gIHJldHVybiBjdHg7XG59XG5cbmV4cG9ydCB7XG4gIENvbnRhY3RDb250ZXh0UHJvdmlkZXIsXG4gIHVzZUNvbnRhY3RDb250ZXh0U3RhdGUsXG4gIHVzZUNvbnRhY3RDb250ZXh0RGlzcGF0Y2gsXG4gIEFERF9DQVBUQ0hBX0lORk8sXG4gIE5BTUVfQ0hBTkdFLFxuICBFTUFJTF9DSEFOR0UsXG4gIE1FU1NBR0VfQ0hBTkdFLFxuICBDQVBUQ0hBX0NIQU5HRSxcbiAgVkFMSURBVEVfRk9STSxcbiAgQ0xFQVJfRk9STSxcbn07XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYXB0Y2hhKCkge1xuICByZXR1cm4gYXhpb3MuZ2V0KFwiL2FwaS9jYXB0Y2hhXCIpO1xufVxuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZENvbnRhY3RVcyhjb250YWN0VXMpIHtcbiAgcmV0dXJuIGF4aW9zLnBvc3QoXCIvYXBpL2NvbnRhY3RVc1wiLCBjb250YWN0VXMpO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge1xuICB1c2VDb250YWN0Q29udGV4dFN0YXRlLFxuICB1c2VDb250YWN0Q29udGV4dERpc3BhdGNoLFxuICBBRERfQ0FQVENIQV9JTkZPLFxuICBOQU1FX0NIQU5HRSxcbiAgRU1BSUxfQ0hBTkdFLFxuICBNRVNTQUdFX0NIQU5HRSxcbiAgQ0FQVENIQV9DSEFOR0UsXG4gIFZBTElEQVRFX0ZPUk0sXG4gIENMRUFSX0ZPUk0sXG59IGZyb20gXCIuLi8uLi9jb250ZXh0cy9Db250YWN0Q29udGV4dFwiO1xuXG5pbXBvcnQgeyBnZXRDYXB0Y2hhIH0gZnJvbSBcIi4vLi4vLi4vc2VydmljZXMvY2FwdGNoYVNlcnZpY2VcIjtcbmltcG9ydCB7IHNlbmRDb250YWN0VXMgfSBmcm9tIFwiLi8uLi8uLi9zZXJ2aWNlcy9jb250YWN0U2VydmljZVwiO1xuXG5hc3luYyBmdW5jdGlvbiBzZW5kKGRpc3BhdGNoLCBjb250YWN0VXMpIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhY3RVczogeyBuYW1lLCBlbWFpbCwgbWVzc2FnZSB9LFxuICAgIGNhcHRjaGEsXG4gIH0gPSBjb250YWN0VXM7XG5cbiAgaWYgKCFuYW1lIHx8ICFlbWFpbCB8fCAhbWVzc2FnZSB8fCAhY2FwdGNoYSkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogVkFMSURBVEVfRk9STSB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBhd2FpdCBzZW5kQ29udGFjdFVzKGNvbnRhY3RVcyk7XG4gIGRpc3BhdGNoKHsgdHlwZTogQ0xFQVJfRk9STSB9KTtcbiAgZ2V0RGF0YShkaXNwYXRjaCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERhdGEoZGlzcGF0Y2gpIHtcbiAgbGV0IHsgZGF0YTogeyBkYXRhIH0gPSB7fSB9ID0gYXdhaXQgZ2V0Q2FwdGNoYSgpO1xuICBkaXNwYXRjaCh7IHR5cGU6IEFERF9DQVBUQ0hBX0lORk8sIHBheWxvYWQ6IGRhdGEgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hDYXB0aGNhKGRpc3BhdGNoKSB7XG4gIGdldERhdGEoZGlzcGF0Y2gpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb250YWN0VXMoKSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlQ29udGFjdENvbnRleHREaXNwYXRjaCgpO1xuICBjb25zdCB7XG4gICAgY2FwdGNoYUltYWdlVVJMLFxuICAgIG5hbWUgPSBcIlwiLFxuICAgIG5hbWVFcnJvcixcbiAgICBlbWFpbCA9IFwiXCIsXG4gICAgZW1haWxFcnJvcixcbiAgICBtZXNzYWdlID0gXCJcIixcbiAgICBtZXNzYWdlRXJyb3IsXG4gICAgY2FwdGNoYSA9IFwiXCIsXG4gICAgY2FwdGNoYUVycm9yLFxuICAgIGNhcHRjaGFTdHJpbmcsXG4gIH0gPSB1c2VDb250YWN0Q29udGV4dFN0YXRlKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnZXREYXRhKGRpc3BhdGNoKTtcbiAgfSwgW10pO1xuXG4gIGxldCBuYW1lRXJyb3JNc2csIGVtYWlsRXJyb3JNc2csIG1lc3NhZ2VFcnJvck1zZywgY2FwdGNoYUVycm9yTXNnO1xuICBpZiAobmFtZUVycm9yKVxuICAgIG5hbWVFcnJvck1zZyA9IDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+IHtuYW1lRXJyb3J9IDwvZGl2PjtcbiAgaWYgKGVtYWlsRXJyb3IpXG4gICAgZW1haWxFcnJvck1zZyA9IDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+IHtlbWFpbEVycm9yfSA8L2Rpdj47XG4gIGlmIChtZXNzYWdlRXJyb3IpXG4gICAgbWVzc2FnZUVycm9yTXNnID0gPGRpdiBjbGFzc05hbWU9XCJlcnJvck1lc3NhZ2VcIj4ge21lc3NhZ2VFcnJvcn0gPC9kaXY+O1xuICBpZiAoY2FwdGNoYUVycm9yKVxuICAgIGNhcHRjaGFFcnJvck1zZyA9IDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+IHtjYXB0Y2hhRXJyb3J9IDwvZGl2PjtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aDE+Q09OVEFDVDwvaDE+XG4gICAgICA8cD5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIFBsZWFzZSBsZWF2ZSBhIG1lc3NhZ2UgYW5kIHdpbGwgZ2V0IGJhY2sgdG8geW91IGF0IHRoZSBlYXJsaWVzdC5cbiAgICAgIDwvcD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkXCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJuYW1lXCI+XG4gICAgICAgICAgICBOYW1lPHNwYW4gY2xhc3NOYW1lPVwibWFuZGF0b3J5XCI+Kjwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgaWQ9XCJuYW1lXCJcbiAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBOQU1FX0NIQU5HRSwgcGF5bG9hZDogZS50YXJnZXQudmFsdWUgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtuYW1lRXJyb3JNc2d9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkXCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJfcmVwbHl0b1wiPlxuICAgICAgICAgICAgRW1haWw8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgICAgaWQ9XCJfcmVwbHl0b1wiXG4gICAgICAgICAgICBuYW1lPVwiX3JlcGx5dG9cIlxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEVNQUlMX0NIQU5HRSwgcGF5bG9hZDogZS50YXJnZXQudmFsdWUgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtlbWFpbEVycm9yTXNnfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwibWVzc2FnZVwiPlxuICAgICAgICAgICAgTWVzc2FnZTxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIGlkPVwibWVzc2FnZVwiXG4gICAgICAgICAgICBuYW1lPVwibWVzc2FnZVwiXG4gICAgICAgICAgICByb3dzPVwiNlwiXG4gICAgICAgICAgICBzcGVsbENoZWNrPVwiZmFsc2VcIlxuICAgICAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogTUVTU0FHRV9DSEFOR0UsIHBheWxvYWQ6IGUudGFyZ2V0LnZhbHVlIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPjwvdGV4dGFyZWE+XG4gICAgICAgICAge21lc3NhZ2VFcnJvck1zZ31cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNhcHRjaGFcIj5cbiAgICAgICAgICAgIENhcHRjaGE8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnblRvcFwiPlxuICAgICAgICAgICAgPGltZyBzcmM9e2NhcHRjaGFJbWFnZVVSTH0gYWx0PVwiQ2FwdGNoYVwiIGNsYXNzTmFtZT1cImNhcHRjaEltYWdlXCIgLz5cbiAgICAgICAgICAgIDxidXR0b24gaHJlZj1cIiNcIiBvbkNsaWNrPXsoKSA9PiByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCl9PlxuICAgICAgICAgICAgICA8aW1nIGFsdD1cInJlZnJlc2hcIiBzcmM9XCIvaW1hZ2VzL3JlZnJlc2gucG5nXCIgLz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgaWQ9XCJjYXB0Y2hhXCJcbiAgICAgICAgICAgIG5hbWU9XCJjYXB0Y2hhXCJcbiAgICAgICAgICAgIHZhbHVlPXtjYXB0Y2hhfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IENBUFRDSEFfQ0hBTkdFLCBwYXlsb2FkOiBlLnRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2NhcHRjaGFFcnJvck1zZ31cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uZmllbGRcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICBzZW5kKGRpc3BhdGNoLCB7XG4gICAgICAgICAgICAgICAgY29udGFjdFVzOiB7IG5hbWUsIGVtYWlsLCBtZXNzYWdlIH0sXG4gICAgICAgICAgICAgICAgY2FwdGNoYSxcbiAgICAgICAgICAgICAgICBjYXB0Y2hhU3RyaW5nLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFNlbmRcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgTG9naW5TdGF0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5jb25zdCBMb2dpbkRpc3BhdGNoQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICB1c2VyTmFtZTogXCJcIixcbiAgcGFzc3dvcmQ6IFwiXCIsXG4gIGZpcnN0TmFtZTogXCJcIixcbiAgbGFzdE5hbWU6IFwiXCIsXG4gIHJldHlwZVBhc3N3b3JkOiBcIlwiLFxuICBhdXRoOiB1bmRlZmluZWQsXG4gIGZvcmdvdFBhc3N3b3JkQ2FwdGNoYTogXCJcIixcbiAgc2lnblVwQ2FwdGNoYTogXCJcIixcbiAgZm9yZ290UGFzc3dvcmRDYXB0Y2hhRGV0YWlsczogdW5kZWZpbmVkLFxuICBzaWduVXBDYXB0Y2hhRGV0YWlsczogdW5kZWZpbmVkLFxuICByZXNldENhcHRjaGE6IFwiXCIsXG4gIHJlc2V0Q2FwdGNoYURldGFpbHM6IHVuZGVmaW5lZCxcbn07XG5cbmNvbnN0IENIQU5HRV9VU0VSTkFNRSA9IDE7XG5jb25zdCBDSEFOR0VfUEFTU1dPUkQgPSAyO1xuY29uc3QgTE9HSU4gPSAzO1xuY29uc3QgTE9HT1VUID0gNDtcbmNvbnN0IFZBTElEQVRFX0xPR0lOX0ZPUk0gPSA1O1xuY29uc3QgQ0xFQVJfRk9STSA9IDY7XG5jb25zdCBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfRk9STSA9IDc7XG5jb25zdCBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX0NBUFRDSEEgPSA4O1xuY29uc3QgQ0hBTkdFX1NJR05fVVBfQ0FQVENIQSA9IDk7XG5jb25zdCBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX0NBUFRDSEFfREVUQUlMUyA9IDEwO1xuY29uc3QgQ0hBTkdFX1NJR05fVVBfQ0FQVENIQV9ERVRBSUxTID0gMTE7XG5jb25zdCBWQUxJREFURV9TSUdOX1VQX0ZPUk0gPSAxMjtcbmNvbnN0IENIQU5HRV9GSVJTVF9OQU1FID0gMTM7XG5jb25zdCBDSEFOR0VfTEFTVF9OQU1FID0gMTQ7XG5jb25zdCBDSEFOR0VfUkVUWVBFX1BBU1NXT1JEID0gMTU7XG5jb25zdCBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfRk9STSA9IDE2O1xuY29uc3QgQ0hBTkdFX0ZPUkdPVF9QQVNTV09SRF9SRVNFVF9DQVBUQ0hBX0RFVEFJTFMgPSAxNztcbmNvbnN0IENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQSA9IDE4O1xuXG5mdW5jdGlvbiBsb2dpblJlZHVjZXIoc3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbikge1xuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLnR5cGUpIHJldHVybjtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBDSEFOR0VfVVNFUk5BTUU6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlck5hbWU6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBDSEFOR0VfRklSU1RfTkFNRTpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBmaXJzdE5hbWU6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBDSEFOR0VfTEFTVF9OQU1FOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxhc3ROYW1lOiBhY3Rpb24ucGF5bG9hZCB9O1xuICAgIGNhc2UgQ0hBTkdFX1BBU1NXT1JEOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHBhc3N3b3JkOiBhY3Rpb24ucGF5bG9hZCB9O1xuICAgIGNhc2UgQ0hBTkdFX1JFVFlQRV9QQVNTV09SRDpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCByZXR5cGVQYXNzd29yZDogYWN0aW9uLnBheWxvYWQgfTtcbiAgICBjYXNlIENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfQ0FQVENIQTpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBmb3Jnb3RQYXNzd29yZENhcHRjaGE6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBDSEFOR0VfU0lHTl9VUF9DQVBUQ0hBOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNpZ25VcENhcHRjaGE6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX0NBUFRDSEFfREVUQUlMUzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBmb3Jnb3RQYXNzd29yZENhcHRjaGFEZXRhaWxzOiBhY3Rpb24ucGF5bG9hZCB9O1xuICAgIGNhc2UgQ0hBTkdFX0ZPUkdPVF9QQVNTV09SRF9SRVNFVF9DQVBUQ0hBOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHJlc2V0Q2FwdGNoYTogYWN0aW9uLnBheWxvYWQgfTtcbiAgICBjYXNlIENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQV9ERVRBSUxTOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHJlc2V0Q2FwdGNoYURldGFpbHM6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBDSEFOR0VfU0lHTl9VUF9DQVBUQ0hBX0RFVEFJTFM6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2lnblVwQ2FwdGNoYURldGFpbHM6IGFjdGlvbi5wYXlsb2FkIH07XG4gICAgY2FzZSBMT0dJTjpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBhdXRoOiBhY3Rpb24ucGF5bG9hZCwgdXNlck5hbWU6IFwiXCIsIHBhc3N3b3JkOiBcIlwiIH07XG4gICAgY2FzZSBMT0dPVVQ6XG4gICAgY2FzZSBDTEVBUl9GT1JNOlxuICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZTtcbiAgICBjYXNlIFZBTElEQVRFX0ZPUkdPVF9QQVNTV09SRF9GT1JNOiB7XG4gICAgICBsZXQgcmV0dXJuU3RhdGUgPSB7IC4uLnN0YXRlIH07XG5cbiAgICAgIGlmICghcmV0dXJuU3RhdGUudXNlck5hbWUpXG4gICAgICAgIHJldHVyblN0YXRlLnVzZXJOYW1lRXJyb3IgPSBcIlVzZXIgbmFtZSBjYW5ub3QgYmUgZW1wdHkuXCI7XG4gICAgICBlbHNlIGRlbGV0ZSByZXR1cm5TdGF0ZS51c2VyTmFtZUVycm9yO1xuXG4gICAgICBpZiAoIXJldHVyblN0YXRlLmZvcmdvdFBhc3N3b3JkQ2FwdGNoYSlcbiAgICAgICAgcmV0dXJuU3RhdGUuZm9yZ290UGFzc3dvcmRDYXB0Y2hhRXJyb3IgPSBcIkNhcHRjaGEgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUuZm9yZ290UGFzc3dvcmRDYXB0Y2hhRXJyb3I7XG5cbiAgICAgIHJldHVybiByZXR1cm5TdGF0ZTtcbiAgICB9XG4gICAgY2FzZSBWQUxJREFURV9MT0dJTl9GT1JNOiB7XG4gICAgICBsZXQgcmV0dXJuU3RhdGUgPSB7IC4uLnN0YXRlIH07XG4gICAgICBpZiAoIXJldHVyblN0YXRlLnVzZXJOYW1lKVxuICAgICAgICByZXR1cm5TdGF0ZS51c2VyTmFtZUVycm9yID0gXCJVc2VyIG5hbWUgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUudXNlck5hbWVFcnJvcjtcblxuICAgICAgaWYgKCFyZXR1cm5TdGF0ZS5wYXNzd29yZClcbiAgICAgICAgcmV0dXJuU3RhdGUucGFzc3dvcmRFcnJvciA9IFwiUGFzc3dvcmQgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUucGFzc3dvcmQ7XG5cbiAgICAgIHJldHVybiByZXR1cm5TdGF0ZTtcbiAgICB9XG4gICAgY2FzZSBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfRk9STToge1xuICAgICAgbGV0IHJldHVyblN0YXRlID0geyAuLi5zdGF0ZSB9O1xuICAgICAgaWYgKCFyZXR1cm5TdGF0ZS51c2VyTmFtZSlcbiAgICAgICAgcmV0dXJuU3RhdGUudXNlck5hbWVFcnJvciA9IFwiVXNlciBuYW1lIGNhbm5vdCBiZSBlbXB0eS5cIjtcbiAgICAgIGVsc2UgZGVsZXRlIHJldHVyblN0YXRlLnVzZXJOYW1lRXJyb3I7XG5cbiAgICAgIGlmICghcmV0dXJuU3RhdGUucGFzc3dvcmQpXG4gICAgICAgIHJldHVyblN0YXRlLnBhc3N3b3JkRXJyb3IgPSBcIlBhc3N3b3JkIGNhbm5vdCBiZSBlbXB0eS5cIjtcbiAgICAgIGVsc2UgZGVsZXRlIHJldHVyblN0YXRlLnBhc3N3b3JkRXJyb3I7XG5cbiAgICAgIGlmIChyZXR1cm5TdGF0ZS5wYXNzd29yZCAhPT0gcmV0dXJuU3RhdGUucmV0eXBlUGFzc3dvcmQpXG4gICAgICAgIHJldHVyblN0YXRlLnJldHlwZVBhc3N3b3JkRXJyb3IgPVxuICAgICAgICAgIFwiUGFzc3dvcmQgc2hvdWxkIG1hdGNoIHdpdGggcmV0eXBlZCBwYXNzd29yZC5cIjtcbiAgICAgIGVsc2UgZGVsZXRlIHJldHVyblN0YXRlLnJldHlwZVBhc3N3b3JkRXJyb3I7XG5cbiAgICAgIGlmICghcmV0dXJuU3RhdGUucmVzZXRDYXB0Y2hhKVxuICAgICAgICByZXR1cm5TdGF0ZS5yZXNldENhcHRjaGFDYXB0Y2hhRXJyb3IgPSBcIkNhcHRjaGEgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUucmVzZXRDYXB0Y2hhQ2FwdGNoYUVycm9yO1xuXG4gICAgICByZXR1cm4gcmV0dXJuU3RhdGU7XG4gICAgfVxuICAgIGNhc2UgVkFMSURBVEVfU0lHTl9VUF9GT1JNOiB7XG4gICAgICBsZXQgcmV0dXJuU3RhdGUgPSB7IC4uLnN0YXRlIH07XG4gICAgICBpZiAoIXJldHVyblN0YXRlLnVzZXJOYW1lKVxuICAgICAgICByZXR1cm5TdGF0ZS51c2VyTmFtZUVycm9yID0gXCJVc2VyIG5hbWUgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUudXNlck5hbWVFcnJvcjtcblxuICAgICAgaWYgKCFyZXR1cm5TdGF0ZS5wYXNzd29yZClcbiAgICAgICAgcmV0dXJuU3RhdGUucGFzc3dvcmRFcnJvciA9IFwiUGFzc3dvcmQgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUucGFzc3dvcmRFcnJvcjtcblxuICAgICAgaWYgKHJldHVyblN0YXRlLnBhc3N3b3JkICE9PSByZXR1cm5TdGF0ZS5yZXR5cGVQYXNzd29yZClcbiAgICAgICAgcmV0dXJuU3RhdGUucmV0eXBlUGFzc3dvcmRFcnJvciA9XG4gICAgICAgICAgXCJQYXNzd29yZCBzaG91bGQgbWF0Y2ggd2l0aCByZXR5cGVkIHBhc3N3b3JkLlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUucmV0eXBlUGFzc3dvcmRFcnJvcjtcblxuICAgICAgaWYgKCFyZXR1cm5TdGF0ZS5maXJzdE5hbWUpXG4gICAgICAgIHJldHVyblN0YXRlLmZpcnN0TmFtZUVycm9yID0gXCJGaXJzdCBuYW1lIGNhbm5vdCBiZSBlbXB0eS5cIjtcbiAgICAgIGVsc2UgZGVsZXRlIHJldHVyblN0YXRlLmZpcnN0TmFtZUVycm9yO1xuXG4gICAgICBpZiAoIXJldHVyblN0YXRlLmxhc3ROYW1lKVxuICAgICAgICByZXR1cm5TdGF0ZS5sYXN0TmFtZUVycm9yID0gXCJMYXN0IG5hbWUgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUubGFzdE5hbWVFcnJvcjtcblxuICAgICAgaWYgKCFyZXR1cm5TdGF0ZS5zaWduVXBDYXB0Y2hhKVxuICAgICAgICByZXR1cm5TdGF0ZS5zaWduVXBDYXB0Y2hhRXJyb3IgPSBcIkNhcHRjaGEgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgICAgZWxzZSBkZWxldGUgcmV0dXJuU3RhdGUuc2lnblVwQ2FwdGNoYUVycm9yO1xuXG4gICAgICByZXR1cm4gcmV0dXJuU3RhdGU7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gTG9naW5Db250ZXh0UHJvdmlkZXIoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcihsb2dpblJlZHVjZXIsIGRlZmF1bHRTdGF0ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8TG9naW5TdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT5cbiAgICAgIDxMb2dpbkRpc3BhdGNoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZGlzcGF0Y2h9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0xvZ2luRGlzcGF0Y2hDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvTG9naW5TdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIHVzZUxvZ2luQ29udGV4dFN0YXRlKCkge1xuICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KExvZ2luU3RhdGVDb250ZXh0KTtcbiAgaWYgKCFjdHgpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJVbmFibGUgY3JlYXRlIGNvbnRleHQgZm9yIGxvZ2luIGNvbnRleHQuIFBsZWFzZSB1c2UgaW4gY29tcG9uZW50cyB3cmFwcGVkIGluIExvZ2luQ29udGV4dFByb3ZpZGVyLlwiXG4gICAgKTtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlTG9naW5Db250ZXh0RGlzcGF0Y2goKSB7XG4gIGNvbnN0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoTG9naW5EaXNwYXRjaENvbnRleHQpO1xuICBpZiAoIWN0eClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSBjcmVhdGUgY29udGV4dCBmb3IgbG9naW4gY29udGV4dC4gUGxlYXNlIHVzZSBpbiBjb21wb25lbnRzIHdyYXBwZWQgaW4gTG9naW5Db250ZXh0UHJvdmlkZXIuXCJcbiAgICApO1xuICByZXR1cm4gY3R4O1xufVxuXG5leHBvcnQge1xuICBMb2dpbkNvbnRleHRQcm92aWRlcixcbiAgdXNlTG9naW5Db250ZXh0U3RhdGUsXG4gIHVzZUxvZ2luQ29udGV4dERpc3BhdGNoLFxuICBDSEFOR0VfVVNFUk5BTUUsXG4gIENIQU5HRV9QQVNTV09SRCxcbiAgVkFMSURBVEVfTE9HSU5fRk9STSxcbiAgQ0xFQVJfRk9STSxcbiAgTE9HSU4sXG4gIExPR09VVCxcbiAgVkFMSURBVEVfRk9SR09UX1BBU1NXT1JEX0ZPUk0sXG4gIFZBTElEQVRFX1NJR05fVVBfRk9STSxcbiAgQ0hBTkdFX0ZPUkdPVF9QQVNTV09SRF9DQVBUQ0hBLFxuICBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX0NBUFRDSEFfREVUQUlMUyxcbiAgQ0hBTkdFX1NJR05fVVBfQ0FQVENIQSxcbiAgQ0hBTkdFX1NJR05fVVBfQ0FQVENIQV9ERVRBSUxTLFxuICBDSEFOR0VfRklSU1RfTkFNRSxcbiAgQ0hBTkdFX0xBU1RfTkFNRSxcbiAgQ0hBTkdFX1JFVFlQRV9QQVNTV09SRCxcbiAgVkFMSURBVEVfRk9SR09UX1BBU1NXT1JEX1JFU0VUX0ZPUk0sXG4gIENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQV9ERVRBSUxTLFxuICBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX1JFU0VUX0NBUFRDSEEsXG59O1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9naW4obG9naW5Cb2R5KSB7XG4gIHJldHVybiBheGlvcy5wb3N0KFwiL2FwaS9zZWN1cml0eS9hdXRoZW50aWNhdGVcIiwgbG9naW5Cb2R5KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvcmdvdFBhc3N3b3JkKHVzZXJJZCwgY2FwdGNoYSwgY2FwdGNoYVN0cmluZykge1xuICByZXR1cm4gYXhpb3MuZ2V0KFwiL2FwaS9zZWN1cml0eS91c2VyL3Jlc2V0UGFzc3dvcmRNYWlsXCIsIHtcbiAgICBwYXJhbXM6IHsgdXNlcklkLCBjYXB0Y2hhLCBjYXB0Y2hhU3RyaW5nIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZm9yZ290UGFzc3dvcmRSZXNldChyZXNldEJvZHkpIHtcbiAgcmV0dXJuIGF4aW9zLnBvc3QoXCIvYXBpL3NlY3VyaXR5L3VzZXIvcmVzZXRQYXNzd29yZFwiLCByZXNldEJvZHkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnblVwVXNlcih1c2VyQm9keSkge1xuICByZXR1cm4gYXhpb3MucG9zdChcIi9hcGkvcmVnaXN0cmF0aW9uXCIsIHVzZXJCb2R5KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFjdGl2YXRlVXNlcihlbWFpbCwgYWN0aXZhdGlvbkNvZGUpIHtcbiAgcmV0dXJuIGF4aW9zLmdldChcIi9hcGkvc2VjdXJpdHkvdXNlci9hY3RpdmF0ZVVzZXJcIiwge1xuICAgIHBhcmFtczogeyB1c2VySWQ6IGVtYWlsLCBhY3RpdmF0aW9uQ29kZSB9LFxuICB9KTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcbiAgdXNlTG9naW5Db250ZXh0U3RhdGUsXG4gIHVzZUxvZ2luQ29udGV4dERpc3BhdGNoLFxuICBDSEFOR0VfVVNFUk5BTUUsXG4gIENIQU5HRV9QQVNTV09SRCxcbiAgVkFMSURBVEVfTE9HSU5fRk9STSxcbiAgTE9HSU4sXG59IGZyb20gXCIuLy4uLy4uLy4uL2NvbnRleHRzL0xvZ2luQ29udGV4dFwiO1xuaW1wb3J0IHsgbG9naW4gfSBmcm9tIFwiLi8uLi8uLi8uLi9zZXJ2aWNlcy9sb2dpblNlcnZpY2VcIjtcbmltcG9ydCB7IEZPUkdPVF9QQVNTV09SRCwgU0lHTl9VUF9GT1JNIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGxvZ2luTm93KGRpc3BhdGNoLCBsb2dpbkJvZHkpIHtcbiAgaWYgKCFsb2dpbkJvZHkudXNlck5hbWUgfHwgIWxvZ2luQm9keS5wYXNzd29yZCkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogVkFMSURBVEVfTE9HSU5fRk9STSB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgZGF0YTogeyBkYXRhOiBhdXRoIH0sXG4gIH0gPSBhd2FpdCBsb2dpbih7XG4gICAgdXNlcklkOiBsb2dpbkJvZHkudXNlck5hbWUsXG4gICAgcGFzc3dvcmQ6IGxvZ2luQm9keS5wYXNzd29yZCxcbiAgfSk7XG4gIGRpc3BhdGNoKHsgdHlwZTogTE9HSU4sIHBheWxvYWQ6IGF1dGggfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luRm9ybShwcm9wcykge1xuICBjb25zdCB7XG4gICAgdXNlck5hbWUsXG4gICAgcGFzc3dvcmQsXG4gICAgdXNlck5hbWVFcnJvcixcbiAgICBwYXNzd29yZEVycm9yLFxuICB9ID0gdXNlTG9naW5Db250ZXh0U3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VMb2dpbkNvbnRleHREaXNwYXRjaCgpO1xuXG4gIGNvbnN0IHVzZXJOYW1lRXJyb3JDb21wb25lbnQgPSB1c2VyTmFtZUVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e3VzZXJOYW1lRXJyb3J9PC9kaXY+XG4gICkgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IHBhc3N3b3JkRXJyb3JDb21wb25lbnQgPSBwYXNzd29yZEVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e3Bhc3N3b3JkRXJyb3J9PC9kaXY+XG4gICkgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm1cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ1c2VyTmFtZVwiPlxuICAgICAgICAgIFVzZXIgbmFtZSAvIEVtYWlsIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgaWQ9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICBzcGVsbENoZWNrPVwiZmFsc2VcIlxuICAgICAgICAgIHZhbHVlPXt1c2VyTmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IENIQU5HRV9VU0VSTkFNRSwgcGF5bG9hZDogZS50YXJnZXQudmFsdWUgfSlcbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICAgIHt1c2VyTmFtZUVycm9yQ29tcG9uZW50fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkXCI+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmRcIj5cbiAgICAgICAgICBQYXNzd29yZCA8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxuICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgc3BlbGxDaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUEFTU1dPUkQsIHBheWxvYWQ6IGUudGFyZ2V0LnZhbHVlIH0pXG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgICB7cGFzc3dvcmRFcnJvckNvbXBvbmVudH1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25maWVsZFwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwic3VibWl0XCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgbG9naW5Ob3coZGlzcGF0Y2gsIHtcbiAgICAgICAgICAgICAgdXNlck5hbWUsXG4gICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICBMb2dpblxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5rc1wiPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHByb3BzLm9uTW9kZUNoYW5nZShGT1JHT1RfUEFTU1dPUkQpfT5cbiAgICAgICAgICBmb3Jnb3QgcGFzc3dvcmRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gcHJvcHMub25Nb2RlQ2hhbmdlKFNJR05fVVBfRk9STSl9PlxuICAgICAgICAgIHNpZ24gdXAgYSBuZXcgdXNlclxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiZXhwb3J0IGNvbnN0IExPR0lOX0ZPUk0gPSAxO1xuZXhwb3J0IGNvbnN0IEZPUkdPVF9QQVNTV09SRCA9IDI7XG5leHBvcnQgY29uc3QgU0lHTl9VUF9GT1JNID0gNDtcbmV4cG9ydCBjb25zdCBSRVNFVF9QQVNTV09SRF9GT1JNID0gODtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcbiAgdXNlTG9naW5Db250ZXh0U3RhdGUsXG4gIHVzZUxvZ2luQ29udGV4dERpc3BhdGNoLFxuICBDSEFOR0VfVVNFUk5BTUUsXG4gIFZBTElEQVRFX0ZPUkdPVF9QQVNTV09SRF9GT1JNLFxuICBDSEFOR0VfRk9SR09UX1BBU1NXT1JEX0NBUFRDSEFfREVUQUlMUyxcbiAgQ0hBTkdFX0ZPUkdPVF9QQVNTV09SRF9DQVBUQ0hBLFxuICBDTEVBUl9GT1JNLFxufSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvTG9naW5Db250ZXh0XCI7XG5pbXBvcnQgeyBnZXRDYXB0Y2hhIH0gZnJvbSBcIi4vLi4vLi4vLi4vc2VydmljZXMvY2FwdGNoYVNlcnZpY2VcIjtcbmltcG9ydCB7IGZvcmdvdFBhc3N3b3JkIGFzIGZvcmdvdFBhc3N3b3JkU2VydmljZUNhbGwgfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZXMvbG9naW5TZXJ2aWNlXCI7XG5pbXBvcnQgeyBMT0dJTl9GT1JNIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGZvcmdvdFBhc3N3b3JkKGRpc3BhdGNoLCB1c2VyTmFtZSwgY2FwdGNoYSwgY2FwdGNoYVN0cmluZykge1xuICBpZiAoIXVzZXJOYW1lIHx8ICFjYXB0Y2hhKSB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfRk9STSB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBmb3Jnb3RQYXNzd29yZFNlcnZpY2VDYWxsKHVzZXJOYW1lLCBjYXB0Y2hhLCBjYXB0Y2hhU3RyaW5nKTtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IENMRUFSX0ZPUk0gfSk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVmcmVzaENhcHRoY2EoZGlzcGF0Y2gpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERhdGEoZGlzcGF0Y2gpIHtcbiAgbGV0IHsgZGF0YTogeyBkYXRhIH0gPSB7fSB9ID0gYXdhaXQgZ2V0Q2FwdGNoYSgpO1xuICBkaXNwYXRjaCh7IHR5cGU6IENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfQ0FQVENIQV9ERVRBSUxTLCBwYXlsb2FkOiBkYXRhIH0pO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCkge1xuICBnZXREYXRhKGRpc3BhdGNoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9yZ290UGFzc3dvcmQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHVzZXJOYW1lLFxuICAgIHVzZXJOYW1lRXJyb3IsXG4gICAgZm9yZ290UGFzc3dvcmRDYXB0Y2hhLFxuICAgIGZvcmdvdFBhc3N3b3JkQ2FwdGNoYUVycm9yLFxuICAgIGZvcmdvdFBhc3N3b3JkQ2FwdGNoYURldGFpbHM6IHsgY2FwdGNoYVN0cmluZywgY2FwdGNoYUltYWdlVVJMIH0gPSB7fSxcbiAgfSA9IHVzZUxvZ2luQ29udGV4dFN0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlTG9naW5Db250ZXh0RGlzcGF0Y2goKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldERhdGEoZGlzcGF0Y2gpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdXNlck5hbWVFcnJvckNvbXBvbmVudCA9IHVzZXJOYW1lRXJyb3IgPyAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvck1lc3NhZ2VcIj57dXNlck5hbWVFcnJvcn08L2Rpdj5cbiAgKSA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBjYXB0Y2hhRXJyb3JDb21wb25lbnQgPSBmb3Jnb3RQYXNzd29yZENhcHRjaGFFcnJvciA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVycm9yTWVzc2FnZVwiPntmb3Jnb3RQYXNzd29yZENhcHRjaGFFcnJvcn08L2Rpdj5cbiAgKSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInVzZXJOYW1lXCI+XG4gICAgICAgICAgVXNlciBuYW1lIC8gRW1haWwgPHNwYW4gY2xhc3NOYW1lPVwibWFuZGF0b3J5XCI+Kjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICBpZD1cInVzZXJOYW1lXCJcbiAgICAgICAgICBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e3VzZXJOYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1VTRVJOQU1FLCBwYXlsb2FkOiBlLnRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge3VzZXJOYW1lRXJyb3JDb21wb25lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjYXB0Y2hhXCI+XG4gICAgICAgICAgQ2FwdGNoYSA8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduVG9wXCI+XG4gICAgICAgICAgPGltZyBzcmM9e2NhcHRjaGFJbWFnZVVSTH0gYWx0PVwiQ2FwdGNoYVwiIGNsYXNzTmFtZT1cImNhcHRjaEltYWdlXCIgLz5cbiAgICAgICAgICA8YnV0dG9uIGhyZWY9XCIjXCIgb25DbGljaz17KCkgPT4gcmVmcmVzaENhcHRoY2EoZGlzcGF0Y2gpfT5cbiAgICAgICAgICAgIDxpbWcgYWx0PVwicmVmcmVzaFwiIHNyYz1cIi9pbWFnZXMvcmVmcmVzaC5wbmdcIiAvPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGlkPVwiY2FwdGNoYVwiXG4gICAgICAgICAgbmFtZT1cImNhcHRjaGFcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e2ZvcmdvdFBhc3N3b3JkQ2FwdGNoYX1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6IENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfQ0FQVENIQSxcbiAgICAgICAgICAgICAgcGF5bG9hZDogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge2NhcHRjaGFFcnJvckNvbXBvbmVudH1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25maWVsZFwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwic3VibWl0XCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgZm9yZ290UGFzc3dvcmQoXG4gICAgICAgICAgICAgIGRpc3BhdGNoLFxuICAgICAgICAgICAgICB1c2VyTmFtZSxcbiAgICAgICAgICAgICAgZm9yZ290UGFzc3dvcmRDYXB0Y2hhLFxuICAgICAgICAgICAgICBjYXB0Y2hhU3RyaW5nXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgRm9yZ290IFBhc3N3b3JkXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmtzXCI+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gcHJvcHMub25Nb2RlQ2hhbmdlKExPR0lOX0ZPUk0pfT5sb2dpbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7XG4gIHVzZUxvZ2luQ29udGV4dFN0YXRlLFxuICB1c2VMb2dpbkNvbnRleHREaXNwYXRjaCxcbiAgQ0hBTkdFX1VTRVJOQU1FLFxuICBDSEFOR0VfUEFTU1dPUkQsXG4gIENIQU5HRV9GSVJTVF9OQU1FLFxuICBDSEFOR0VfTEFTVF9OQU1FLFxuICBDSEFOR0VfUkVUWVBFX1BBU1NXT1JELFxuICBWQUxJREFURV9TSUdOX1VQX0ZPUk0sXG4gIENIQU5HRV9TSUdOX1VQX0NBUFRDSEFfREVUQUlMUyxcbiAgQ0hBTkdFX1NJR05fVVBfQ0FQVENIQSxcbiAgQ0xFQVJfRk9STSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL0xvZ2luQ29udGV4dFwiO1xuaW1wb3J0IHsgZ2V0Q2FwdGNoYSB9IGZyb20gXCIuLy4uLy4uLy4uL3NlcnZpY2VzL2NhcHRjaGFTZXJ2aWNlXCI7XG5pbXBvcnQgeyBzaWduVXBVc2VyIGFzIHNpZ25VcFVzZXJTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL2xvZ2luU2VydmljZVwiO1xuaW1wb3J0IHsgTE9HSU5fRk9STSB9IGZyb20gXCIuL0NvbnN0YW50c1wiO1xuXG5hc3luYyBmdW5jdGlvbiBzaWduVXBVc2VyTG9jYWwoZGlzcGF0Y2gsIHNpZ25VcFVzZXIpIHtcbiAgY29uc3Qge1xuICAgIHVzZXI6IHsgZW1haWwsIHBhc3N3b3JkLCByZXR5cGVQYXNzd29yZCwgZmlyc3ROYW1lLCBsYXN0TmFtZSB9LFxuICAgIGNhcHRjaGEsXG4gIH0gPSBzaWduVXBVc2VyO1xuICBpZiAoXG4gICAgIWVtYWlsIHx8XG4gICAgIWNhcHRjaGEgfHxcbiAgICAhcGFzc3dvcmQgfHxcbiAgICAhcmV0eXBlUGFzc3dvcmQgfHxcbiAgICAhZmlyc3ROYW1lIHx8XG4gICAgIWxhc3ROYW1lIHx8XG4gICAgcGFzc3dvcmQgIT09IHJldHlwZVBhc3N3b3JkXG4gICkge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogVkFMSURBVEVfU0lHTl9VUF9GT1JNIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IHNpZ25VcFVzZXJTZXJ2aWNlKHNpZ25VcFVzZXIpO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0xFQVJfRk9STSB9KTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YShkaXNwYXRjaCkge1xuICBsZXQgeyBkYXRhOiB7IGRhdGEgfSA9IHt9IH0gPSBhd2FpdCBnZXRDYXB0Y2hhKCk7XG4gIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1NJR05fVVBfQ0FQVENIQV9ERVRBSUxTLCBwYXlsb2FkOiBkYXRhIH0pO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCkge1xuICBnZXREYXRhKGRpc3BhdGNoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9yZ290UGFzc3dvcmQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHVzZXJOYW1lLFxuICAgIHVzZXJOYW1lRXJyb3IsXG4gICAgcGFzc3dvcmQsXG4gICAgcGFzc3dvcmRFcnJvcixcbiAgICByZXR5cGVQYXNzd29yZCxcbiAgICByZXR5cGVQYXNzd29yZEVycm9yLFxuICAgIGZpcnN0TmFtZSxcbiAgICBmaXJzdE5hbWVFcnJvcixcbiAgICBsYXN0TmFtZSxcbiAgICBsYXN0TmFtZUVycm9yLFxuICAgIHNpZ25VcENhcHRjaGEsXG4gICAgc2lnblVwQ2FwdGNoYUNhcHRjaGFFcnJvcixcbiAgICBzaWduVXBDYXB0Y2hhRGV0YWlsczogeyBjYXB0Y2hhU3RyaW5nLCBjYXB0Y2hhSW1hZ2VVUkwgfSA9IHt9LFxuICB9ID0gdXNlTG9naW5Db250ZXh0U3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VMb2dpbkNvbnRleHREaXNwYXRjaCgpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZ2V0RGF0YShkaXNwYXRjaCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB1c2VyTmFtZUVycm9yQ29tcG9uZW50ID0gdXNlck5hbWVFcnJvciA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVycm9yTWVzc2FnZVwiPnt1c2VyTmFtZUVycm9yfTwvZGl2PlxuICApIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHBhc3N3b3JkRXJyb3JDb21wb25lbnQgPSBwYXNzd29yZEVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e3Bhc3N3b3JkRXJyb3J9PC9kaXY+XG4gICkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgcmV0eXBlUGFzc3dvcmRFcnJvckNvbXBvbmVudCA9IHJldHlwZVBhc3N3b3JkRXJyb3IgPyAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvck1lc3NhZ2VcIj57cmV0eXBlUGFzc3dvcmRFcnJvcn08L2Rpdj5cbiAgKSA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBmaXJzdE5hbWVFcnJvckNvbXBvbmVudCA9IGZpcnN0TmFtZUVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e2ZpcnN0TmFtZUVycm9yfTwvZGl2PlxuICApIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGxhc3ROYW1lRXJyb3JDb21wb25lbnQgPSBsYXN0TmFtZUVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e2xhc3ROYW1lRXJyb3J9PC9kaXY+XG4gICkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgY2FwdGNoYUVycm9yQ29tcG9uZW50ID0gc2lnblVwQ2FwdGNoYUNhcHRjaGFFcnJvciA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVycm9yTWVzc2FnZVwiPntzaWduVXBDYXB0Y2hhQ2FwdGNoYUVycm9yfTwvZGl2PlxuICApIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzaWduVXAgZm9ybVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInVzZXJOYW1lXCI+XG4gICAgICAgICAgVXNlciBuYW1lIC8gRW1haWwgPHNwYW4gY2xhc3NOYW1lPVwibWFuZGF0b3J5XCI+Kjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICBpZD1cInVzZXJOYW1lXCJcbiAgICAgICAgICBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e3VzZXJOYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1VTRVJOQU1FLCBwYXlsb2FkOiBlLnRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge3VzZXJOYW1lRXJyb3JDb21wb25lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHdvRmllbGRzXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkXCI+XG4gICAgICAgICAgICBQYXNzd29yZCA8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgc3BlbGxDaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUEFTU1dPUkQsIHBheWxvYWQ6IGUudGFyZ2V0LnZhbHVlIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7cGFzc3dvcmRFcnJvckNvbXBvbmVudH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJldHlwZVBhc3N3b3JkXCI+XG4gICAgICAgICAgICBSZS10eXBlIFBhc3N3b3JkIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBpZD1cInJldHlwZVBhc3N3b3JkXCJcbiAgICAgICAgICAgIG5hbWU9XCJyZXR5cGVQYXNzd29yZFwiXG4gICAgICAgICAgICBzcGVsbENoZWNrPVwiZmFsc2VcIlxuICAgICAgICAgICAgdmFsdWU9e3JldHlwZVBhc3N3b3JkfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogQ0hBTkdFX1JFVFlQRV9QQVNTV09SRCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtyZXR5cGVQYXNzd29yZEVycm9yQ29tcG9uZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0d29GaWVsZHNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZmlyc3ROYW1lXCI+XG4gICAgICAgICAgICBGaXJzdCBuYW1lIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGlkPVwiZmlyc3ROYW1lXCJcbiAgICAgICAgICAgIG5hbWU9XCJmaXJzdE5hbWVcIlxuICAgICAgICAgICAgc3BlbGxDaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICAgIHZhbHVlPXtmaXJzdE5hbWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX0ZJUlNUX05BTUUsIHBheWxvYWQ6IGUudGFyZ2V0LnZhbHVlIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Zmlyc3ROYW1lRXJyb3JDb21wb25lbnR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpZWxkXCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJsYXN0TmFtZVwiPlxuICAgICAgICAgICAgTGFzdCBuYW1lIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGlkPVwibGFzdE5hbWVcIlxuICAgICAgICAgICAgbmFtZT1cImxhc3ROYW1lXCJcbiAgICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgICB2YWx1ZT17bGFzdE5hbWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX0xBU1RfTkFNRSwgcGF5bG9hZDogZS50YXJnZXQudmFsdWUgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtsYXN0TmFtZUVycm9yQ29tcG9uZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNhcHRjaGFcIj5cbiAgICAgICAgICBDYXB0Y2hhIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ25Ub3BcIj5cbiAgICAgICAgICA8aW1nIHNyYz17Y2FwdGNoYUltYWdlVVJMfSBhbHQ9XCJDYXB0Y2hhXCIgY2xhc3NOYW1lPVwiY2FwdGNoSW1hZ2VcIiAvPlxuICAgICAgICAgIDxidXR0b24gaHJlZj1cIiNcIiBvbkNsaWNrPXsoKSA9PiByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCl9PlxuICAgICAgICAgICAgPGltZyBhbHQ9XCJyZWZyZXNoXCIgc3JjPVwiL2ltYWdlcy9yZWZyZXNoLnBuZ1wiIC8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgaWQ9XCJjYXB0Y2hhXCJcbiAgICAgICAgICBuYW1lPVwiY2FwdGNoYVwiXG4gICAgICAgICAgc3BlbGxDaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICB2YWx1ZT17c2lnblVwQ2FwdGNoYX1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6IENIQU5HRV9TSUdOX1VQX0NBUFRDSEEsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYXB0Y2hhRXJyb3JDb21wb25lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uZmllbGRcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInN1Ym1pdFwiXG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgIHNpZ25VcFVzZXJMb2NhbChkaXNwYXRjaCwge1xuICAgICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgZW1haWw6IHVzZXJOYW1lLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHJldHlwZVBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0TmFtZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2FwdGNoYTogc2lnblVwQ2FwdGNoYSxcbiAgICAgICAgICAgICAgY2FwdGNoYVN0cmluZyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgU0lHTiBVUFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5rc1wiPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHByb3BzLm9uTW9kZUNoYW5nZShMT0dJTl9GT1JNKX0+bG9naW48L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCB7XG4gIHVzZUxvZ2luQ29udGV4dFN0YXRlLFxuICB1c2VMb2dpbkNvbnRleHREaXNwYXRjaCxcbiAgQ0hBTkdFX1BBU1NXT1JELFxuICBDSEFOR0VfUkVUWVBFX1BBU1NXT1JELFxuICBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfRk9STSxcbiAgQ0hBTkdFX0ZPUkdPVF9QQVNTV09SRF9SRVNFVF9DQVBUQ0hBX0RFVEFJTFMsXG4gIENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQSxcbiAgQ0xFQVJfRk9STSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL0xvZ2luQ29udGV4dFwiO1xuaW1wb3J0IHsgZ2V0Q2FwdGNoYSB9IGZyb20gXCIuLi8uLi8uLi9zZXJ2aWNlcy9jYXB0Y2hhU2VydmljZVwiO1xuaW1wb3J0IHsgZm9yZ290UGFzc3dvcmRSZXNldCB9IGZyb20gXCIuLi8uLi8uLi9zZXJ2aWNlcy9sb2dpblNlcnZpY2VcIjtcblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRQYXNzd29yZExvY2FsKGRpc3BhdGNoLCBoaXN0b3J5LCByZXNldFJlcXVlc3QpIHtcbiAgY29uc3QgeyBwYXNzd29yZCwgcmV0eXBlUGFzc3dvcmQsIGNhcHRjaGEgfSA9IHJlc2V0UmVxdWVzdDtcbiAgaWYgKCFjYXB0Y2hhIHx8ICFwYXNzd29yZCB8fCAhcmV0eXBlUGFzc3dvcmQgfHwgcGFzc3dvcmQgIT09IHJldHlwZVBhc3N3b3JkKSB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBWQUxJREFURV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfRk9STSB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBmb3Jnb3RQYXNzd29yZFJlc2V0KHJlc2V0UmVxdWVzdCk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDTEVBUl9GT1JNIH0pO1xuICAgIGhpc3RvcnkucHVzaChcIi9kZW1vXCIpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlZnJlc2hDYXB0aGNhKGRpc3BhdGNoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXREYXRhKGRpc3BhdGNoKSB7XG4gIGxldCB7IGRhdGE6IHsgZGF0YSB9ID0ge30gfSA9IGF3YWl0IGdldENhcHRjaGEoKTtcbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQV9ERVRBSUxTLFxuICAgIHBheWxvYWQ6IGRhdGEsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWZyZXNoQ2FwdGhjYShkaXNwYXRjaCkge1xuICBnZXREYXRhKGRpc3BhdGNoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9yZ290UGFzc3dvcmRSZXNldCh7IHVzZXJOYW1lLCByZXNldFBhc3N3b3JkU3RyaW5nIH0pIHtcbiAgY29uc3Qge1xuICAgIHBhc3N3b3JkLFxuICAgIHBhc3N3b3JkRXJyb3IsXG4gICAgcmV0eXBlUGFzc3dvcmQsXG4gICAgcmV0eXBlUGFzc3dvcmRFcnJvcixcbiAgICByZXNldENhcHRjaGEsXG4gICAgcmVzZXRDYXB0Y2hhQ2FwdGNoYUVycm9yLFxuICAgIHJlc2V0Q2FwdGNoYURldGFpbHM6IHsgY2FwdGNoYVN0cmluZywgY2FwdGNoYUltYWdlVVJMIH0gPSB7fSxcbiAgfSA9IHVzZUxvZ2luQ29udGV4dFN0YXRlKCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlTG9naW5Db250ZXh0RGlzcGF0Y2goKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldERhdGEoZGlzcGF0Y2gpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcblxuICBjb25zdCBwYXNzd29yZEVycm9yQ29tcG9uZW50ID0gcGFzc3dvcmRFcnJvciA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVycm9yTWVzc2FnZVwiPntwYXNzd29yZEVycm9yfTwvZGl2PlxuICApIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHJldHlwZVBhc3N3b3JkRXJyb3JDb21wb25lbnQgPSByZXR5cGVQYXNzd29yZEVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e3JldHlwZVBhc3N3b3JkRXJyb3J9PC9kaXY+XG4gICkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgY2FwdGNoYUVycm9yQ29tcG9uZW50ID0gcmVzZXRDYXB0Y2hhQ2FwdGNoYUVycm9yID8gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JNZXNzYWdlXCI+e3Jlc2V0Q2FwdGNoYUNhcHRjaGFFcnJvcn08L2Rpdj5cbiAgKSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic2lnblVwIGZvcm1cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ1c2VyTmFtZVwiPlxuICAgICAgICAgIFVzZXIgbmFtZSAvIEVtYWlsIDxzcGFuIGNsYXNzTmFtZT1cIm1hbmRhdG9yeVwiPio8L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgaWQ9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICBzcGVsbENoZWNrPVwiZmFsc2VcIlxuICAgICAgICAgIHZhbHVlPXt1c2VyTmFtZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkXCI+XG4gICAgICAgICAgUGFzc3dvcmQgPHNwYW4gY2xhc3NOYW1lPVwibWFuZGF0b3J5XCI+Kjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICBpZD1cInBhc3N3b3JkXCJcbiAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1BBU1NXT1JELCBwYXlsb2FkOiBlLnRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge3Bhc3N3b3JkRXJyb3JDb21wb25lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJyZXR5cGVQYXNzd29yZFwiPlxuICAgICAgICAgIFJlLXR5cGUgUGFzc3dvcmQgPHNwYW4gY2xhc3NOYW1lPVwibWFuZGF0b3J5XCI+Kjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICBpZD1cInJldHlwZVBhc3N3b3JkXCJcbiAgICAgICAgICBuYW1lPVwicmV0eXBlUGFzc3dvcmRcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e3JldHlwZVBhc3N3b3JkfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogQ0hBTkdFX1JFVFlQRV9QQVNTV09SRCxcbiAgICAgICAgICAgICAgcGF5bG9hZDogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge3JldHlwZVBhc3N3b3JkRXJyb3JDb21wb25lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjYXB0Y2hhXCI+XG4gICAgICAgICAgQ2FwdGNoYSA8c3BhbiBjbGFzc05hbWU9XCJtYW5kYXRvcnlcIj4qPC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduVG9wXCI+XG4gICAgICAgICAgPGltZyBzcmM9e2NhcHRjaGFJbWFnZVVSTH0gYWx0PVwiQ2FwdGNoYVwiIGNsYXNzTmFtZT1cImNhcHRjaEltYWdlXCIgLz5cbiAgICAgICAgICA8YnV0dG9uIGhyZWY9XCIjXCIgb25DbGljaz17KCkgPT4gcmVmcmVzaENhcHRoY2EoZGlzcGF0Y2gpfT5cbiAgICAgICAgICAgIDxpbWcgYWx0PVwicmVmcmVzaFwiIHNyYz1cIi9pbWFnZXMvcmVmcmVzaC5wbmdcIiAvPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGlkPVwiY2FwdGNoYVwiXG4gICAgICAgICAgbmFtZT1cImNhcHRjaGFcIlxuICAgICAgICAgIHNwZWxsQ2hlY2s9XCJmYWxzZVwiXG4gICAgICAgICAgdmFsdWU9e3Jlc2V0Q2FwdGNoYX1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6IENIQU5HRV9GT1JHT1RfUEFTU1dPUkRfUkVTRVRfQ0FQVENIQSxcbiAgICAgICAgICAgICAgcGF5bG9hZDogZS50YXJnZXQudmFsdWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgICAge2NhcHRjaGFFcnJvckNvbXBvbmVudH1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25maWVsZFwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwic3VibWl0XCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgcmVzZXRQYXNzd29yZExvY2FsKGRpc3BhdGNoLCBoaXN0b3J5LCB7XG4gICAgICAgICAgICAgIHVzZXJJZDogdXNlck5hbWUsXG4gICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICByZXR5cGVQYXNzd29yZCxcbiAgICAgICAgICAgICAgcmVzZXRQYXNzd29yZFN0cmluZyxcbiAgICAgICAgICAgICAgY2FwdGNoYTogcmVzZXRDYXB0Y2hhLFxuICAgICAgICAgICAgICBjYXB0Y2hhU3RyaW5nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICBSRVNFVCBQQVNTV09SRFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgTG9naW5Gb3JtIGZyb20gXCIuL0xvZ2luRm9ybVwiO1xuXG5pbXBvcnQge1xuICBMT0dJTl9GT1JNLFxuICBTSUdOX1VQX0ZPUk0sXG4gIEZPUkdPVF9QQVNTV09SRCxcbiAgUkVTRVRfUEFTU1dPUkRfRk9STSxcbn0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgRm9yZ290UGFzc3dvcmQgZnJvbSBcIi4vRm9yZ290UGFzc3dvcmRcIjtcbmltcG9ydCBTaWduVXAgZnJvbSBcIi4vU2lnblVwXCI7XG5pbXBvcnQgRm9yZ290UGFzc3dvcmRSZXNldCBmcm9tIFwiLi9Gb3Jnb3RQYXNzd29yZFJlc2V0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luKHsgZW1haWxJZCwgcmVzZXRQYXNzd29yZFN0cmluZyB9KSB7XG4gIGxldCBbY3VycmVudE1vZGUsIHNldEN1cnJlbnRNb2RlXSA9IHVzZVN0YXRlKFxuICAgIGVtYWlsSWQgJiYgcmVzZXRQYXNzd29yZFN0cmluZyA/IFJFU0VUX1BBU1NXT1JEX0ZPUk0gOiBMT0dJTl9GT1JNXG4gICk7XG5cbiAgbGV0IGN1cnJlbnRDb21wb25lbnQgPSB1bmRlZmluZWQ7XG4gIGlmIChjdXJyZW50TW9kZSA9PT0gU0lHTl9VUF9GT1JNKVxuICAgIGN1cnJlbnRDb21wb25lbnQgPSA8U2lnblVwIG9uTW9kZUNoYW5nZT17KHYpID0+IHNldEN1cnJlbnRNb2RlKHYpfSAvPjtcbiAgZWxzZSBpZiAoY3VycmVudE1vZGUgPT09IEZPUkdPVF9QQVNTV09SRClcbiAgICBjdXJyZW50Q29tcG9uZW50ID0gKFxuICAgICAgPEZvcmdvdFBhc3N3b3JkIG9uTW9kZUNoYW5nZT17KHYpID0+IHNldEN1cnJlbnRNb2RlKHYpfSAvPlxuICAgICk7XG4gIGVsc2UgaWYgKGN1cnJlbnRNb2RlID09PSBSRVNFVF9QQVNTV09SRF9GT1JNKVxuICAgIGN1cnJlbnRDb21wb25lbnQgPSAoXG4gICAgICA8Rm9yZ290UGFzc3dvcmRSZXNldFxuICAgICAgICB1c2VyTmFtZT17ZW1haWxJZH1cbiAgICAgICAgcmVzZXRQYXNzd29yZFN0cmluZz17cmVzZXRQYXNzd29yZFN0cmluZ31cbiAgICAgIC8+XG4gICAgKTtcbiAgZWxzZSBjdXJyZW50Q29tcG9uZW50ID0gPExvZ2luRm9ybSBvbk1vZGVDaGFuZ2U9eyh2KSA9PiBzZXRDdXJyZW50TW9kZSh2KX0gLz47XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luQmFja1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luTGVmdFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5LSU5FVElDIElOU1RSVUNUSU9OIFJVTlRJTUU8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNtYWxsUmVjdFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luUmlnaHRcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImxvZ2luTG9nb1wiIHNyYz1cIi9pbWFnZXMvbG9nb2sucG5nXCIgYWx0PVwiTG9nbyBiaWdcIiAvPlxuICAgICAgICAgIHtjdXJyZW50Q29tcG9uZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VMb2dpbkNvbnRleHRTdGF0ZSB9IGZyb20gXCIuLy4uLy4uL2NvbnRleHRzL0xvZ2luQ29udGV4dFwiO1xuaW1wb3J0IExvZ2luIGZyb20gXCIuL2xvZ2luL0xvZ2luXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERvY3MoKSB7XG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlTG9naW5Db250ZXh0U3RhdGUoKTtcblxuICBpZiAoIWF1dGgpIHJldHVybiA8TG9naW4gLz47XG5cbiAgcmV0dXJuIDxkaXY+PC9kaXY+O1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0U2lkZShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYmlnVGl0bGVcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcm9wcy5zdHlsZUNsYXNzTmFtZX1yZWN0IHJlY3RgfT4mbmJzcDs8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5LSU5FVElDIElOU1RSVUNUSU9OIFJVTlRJTUU8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9nbyhwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcm9wcy5pc0RlbW8gPyBcImRlbW9Mb2dvIFwiIDogXCJcIn1sb2dvYH0+XG4gICAgICA8YSBocmVmPVwiL1wiPlxuICAgICAgICA8aW1nIHNyYz1cIi9pbWFnZXMvbG9nb2tzbWFsbC5wbmdcIiBhbHQ9XCJsb2dvXCI+PC9pbWc+XG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmNvbnN0IE1lc3NhZ2VTdGF0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5jb25zdCBNZXNzYWdlRGlzcGF0Y2hDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5jb25zdCBkZWZhdWx0U3RhdGUgPSBbXTtcblxuY29uc3QgQUREX01FU1NBR0UgPSAxO1xuY29uc3QgREVMRVRFX01FU1NBR0UgPSAyO1xuY29uc3QgQ0xFQVJfT0xEX01FU1NBR0VTID0gNDtcblxuZnVuY3Rpb24gbWVzc2FnZVJlZHVjZXIoc3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbikge1xuICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLnR5cGUpIHJldHVybjtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBRERfTUVTU0FHRTpcbiAgICAgIGlmICghYWN0aW9uLnBheWxvYWQpIHJldHVybiBzdGF0ZTtcbiAgICAgIHJldHVybiBbeyAuLi5hY3Rpb24ucGF5bG9hZCwgd2hlbjogRGF0ZS5ub3coKSB9LCAuLi5zdGF0ZV07XG4gICAgY2FzZSBERUxFVEVfTUVTU0FHRTpcbiAgICAgIHJldHVybiBzdGF0ZS5maWx0ZXIoKGUpID0+IGUud2hlbiAhPT0gYWN0aW9uLnBheWxvYWQpO1xuICAgIGNhc2UgQ0xFQVJfT0xEX01FU1NBR0VTOlxuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcigoZSkgPT4gRGF0ZS5ub3coKSAtIGUud2hlbiA8IDEwMDAwKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmxldCByZWdpc3RlcmVkID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gTWVzc2FnZUNvbnRleHRQcm92aWRlcih7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBSZWFjdC51c2VSZWR1Y2VyKG1lc3NhZ2VSZWR1Y2VyLCBkZWZhdWx0U3RhdGUpO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZXIocmVzcG9uc2UpIHtcbiAgICBsZXQge1xuICAgICAgZGF0YTogeyB0eXBlLCBtZXNzYWdlLCBlcnJvcjogeyBlcnJvckNvZGUsIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSB9ID0ge30gfSxcbiAgICAgIHN0YXR1cyxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNUZXh0LFxuICAgIH0gPSByZXNwb25zZTtcbiAgICBsZXQgbXNnID0gZXJyb3JDb2RlID8gZXJyb3JNZXNzYWdlIDogbWVzc2FnZTtcbiAgICBpZiAoIW1zZyAmJiAoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+IDI5OSkpIHtcbiAgICAgIHR5cGUgPSBcIkVSUk9SXCI7XG4gICAgICBtc2cgPSBkYXRhID8gZGF0YSA6IHN0YXR1c1RleHQ7XG4gICAgfVxuICAgIGlmICghbXNnKSByZXR1cm4gcmVzcG9uc2U7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQUREX01FU1NBR0UsXG4gICAgICBwYXlsb2FkOiB7IHR5cGUsIG1lc3NhZ2U6IG1zZywgZXJyb3JDb2RlIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgaWYgKCFyZWdpc3RlcmVkKSB7XG4gICAgYXhpb3MuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShoYW5kbGVyLCAoZXJyKSA9PiB7XG4gICAgICBoYW5kbGVyKGVyci5yZXNwb25zZSk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG5cbiAgICByZWdpc3RlcmVkID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE1lc3NhZ2VTdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT5cbiAgICAgIDxNZXNzYWdlRGlzcGF0Y2hDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkaXNwYXRjaH0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvTWVzc2FnZURpc3BhdGNoQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L01lc3NhZ2VTdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDb250ZXh0U3RhdGUoKSB7XG4gIGNvbnN0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoTWVzc2FnZVN0YXRlQ29udGV4dCk7XG4gIGlmICghY3R4KVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVW5hYmxlIGNyZWF0ZSBjb250ZXh0IGZvciBtZXNzYWdlIGNvbnRleHQuIFBsZWFzZSB1c2UgaW4gY29tcG9uZW50cyB3cmFwcGVkIGluIE1lc3NhZ2VDb250ZXh0UHJvdmlkZXIuXCJcbiAgICApO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ29udGV4dERpc3BhdGNoKCkge1xuICBjb25zdCBjdHggPSBSZWFjdC51c2VDb250ZXh0KE1lc3NhZ2VEaXNwYXRjaENvbnRleHQpO1xuICBpZiAoIWN0eClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSBjcmVhdGUgY29udGV4dCBmb3IgbWVzc2FnZSBjb250ZXh0LiBQbGVhc2UgdXNlIGluIGNvbXBvbmVudHMgd3JhcHBlZCBpbiBNZXNzYWdlQ29udGV4dFByb3ZpZGVyLlwiXG4gICAgKTtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZXhwb3J0IHtcbiAgTWVzc2FnZUNvbnRleHRQcm92aWRlcixcbiAgdXNlTWVzc2FnZUNvbnRleHRTdGF0ZSxcbiAgdXNlTWVzc2FnZUNvbnRleHREaXNwYXRjaCxcbiAgQUREX01FU1NBR0UsXG4gIERFTEVURV9NRVNTQUdFLFxuICBDTEVBUl9PTERfTUVTU0FHRVMsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge1xuICBERUxFVEVfTUVTU0FHRSxcbiAgQ0xFQVJfT0xEX01FU1NBR0VTLFxuICB1c2VNZXNzYWdlQ29udGV4dFN0YXRlLFxuICB1c2VNZXNzYWdlQ29udGV4dERpc3BhdGNoLFxufSBmcm9tIFwiLi8uLi8uLi9jb250ZXh0cy9NZXNzYWdlQ29udGV4dFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZXNzYWdlKCkge1xuICBjb25zdCBtZXNzYWdlcyA9IHVzZU1lc3NhZ2VDb250ZXh0U3RhdGUoKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VNZXNzYWdlQ29udGV4dERpc3BhdGNoKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoID0gc2V0SW50ZXJ2YWwoKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiBDTEVBUl9PTERfTUVTU0FHRVMgfSksIDEwMDApO1xuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge21lc3NhZ2VzLm1hcCgoZSwgaW5kZXgpID0+IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGtleT17ZS53aGVufVxuICAgICAgICAgIGNsYXNzTmFtZT17YG1lc3NhZ2VDb250YWluZXIgJHtlLnR5cGV9YH1cbiAgICAgICAgICBzdHlsZT17eyBib3R0b206IGAke2luZGV4ICogODAgKyAxNX1weGAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiIHRpdGxlPXtlLm1lc3NhZ2V9PlxuICAgICAgICAgICAge2UubWVzc2FnZSA/IGAke2UubWVzc2FnZS5zdWJzdHJpbmcoMCwgMTgwKX0uLi5gIDogXCJcIn1cbiAgICAgICAgICAgIHtlLmVycm9yQ29kZSA/IGAgKCR7ZS5lcnJvckNvZGV9KWAgOiBcIlwifVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xvc2VCdXR0b25cIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IERFTEVURV9NRVNTQUdFLCBwYXlsb2FkOiBlLndoZW4gfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9pbWFnZXMvY2xvc2UucG5nXCIgYWx0PVwiUmVtb3ZlIE1lc3NhZ2VcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSl9XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgYWN0aXZhdGVVc2VyIGFzIGFjdGl2YXRlVXNlclNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZXMvbG9naW5TZXJ2aWNlXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGFjdGl2YXRlVXNlcihlbWFpbElkLCBhY3RpdmF0aW9uU3RyaW5nKSB7XG4gIGF3YWl0IGFjdGl2YXRlVXNlclNlcnZpY2UoZW1haWxJZCwgYWN0aXZhdGlvblN0cmluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFjdGl2YXRlVXNlcih7IGVtYWlsSWQsIGFjdGl2YXRpb25TdHJpbmcgfSkge1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFlbWFpbElkIHx8ICFhY3RpdmF0aW9uU3RyaW5nKSByZXR1cm47XG4gICAgYWN0aXZhdGVVc2VyKGVtYWlsSWQsIGFjdGl2YXRpb25TdHJpbmcpO1xuICAgIGhpc3RvcnkucHVzaChcIi9kZW1vXCIpO1xuICB9LCBbZW1haWxJZCwgYWN0aXZhdGlvblN0cmluZ10pO1xuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImZ1bGxzY3JlZW5NZXNzYWdlIHRpdGxlXCI+QWN0aXZhdGluZyBVc2VyIC4uLjwvZGl2Pjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2gsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IE5hdiBmcm9tIFwiLi9jb21wb25lbnRzL3NpdGUvTmF2XCI7XG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9jb21wb25lbnRzL3NpdGUvSG9tZVwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCIuL2NvbXBvbmVudHMvc2l0ZS9BYm91dFwiO1xuaW1wb3J0IERvY3MgZnJvbSBcIi4vY29tcG9uZW50cy9zaXRlL0RvY3NcIjtcbmltcG9ydCBDb250YWN0VXMgZnJvbSBcIi4vY29tcG9uZW50cy9zaXRlL0NvbnRhY3RVc1wiO1xuaW1wb3J0IERlbW8gZnJvbSBcIi4vY29tcG9uZW50cy9kZW1vL0RlbW9cIjtcbmltcG9ydCBMZWZ0U2lkZSBmcm9tIFwiLi9jb21wb25lbnRzL3NpdGUvTGVmdFNpZGVcIjtcbmltcG9ydCBMb2dvIGZyb20gXCIuL2NvbXBvbmVudHMvc2l0ZS9Mb2dvXCI7XG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9jb21wb25lbnRzL3NpdGUvTWVzc2FnZVwiO1xuXG5pbXBvcnQgeyBDb250YWN0Q29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4vY29udGV4dHMvQ29udGFjdENvbnRleHRcIjtcbmltcG9ydCBBY3RpdmF0ZVVzZXIgZnJvbSBcIi4vY29tcG9uZW50cy9kZW1vL2xvZ2luL0FjdGl2YXRlVXNlclwiO1xuaW1wb3J0IExvZ2luIGZyb20gXCIuL2NvbXBvbmVudHMvZGVtby9sb2dpbi9Mb2dpblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8TmF2IC8+XG4gICAgICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgICAgIDxMZWZ0U2lkZSBzdHlsZUNsYXNzTmFtZT1cImhvbWVcIiAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWUgdGV4dENvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxIb21lIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9kb2NzXCI+XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8TmF2IC8+XG4gICAgICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgICAgIDxMZWZ0U2lkZSBzdHlsZUNsYXNzTmFtZT1cImRvY3NcIiAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRvY3MgdGV4dENvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxEb2NzIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9kZW1vXCI+XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8TmF2IGlzRGVtbz17dHJ1ZX0gLz5cbiAgICAgICAgICAgICAgPExvZ28gaXNEZW1vPXt0cnVlfSAvPlxuICAgICAgICAgICAgICA8RGVtbyAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hYm91dFwiPlxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPE5hdiAvPlxuICAgICAgICAgICAgICA8TG9nbyAvPlxuICAgICAgICAgICAgICA8TGVmdFNpZGUgc3R5bGVDbGFzc05hbWU9XCJhYm91dFwiIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJvdXQgdGV4dENvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxBYm91dCAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvY29udGFjdFVzXCI+XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8TmF2IC8+XG4gICAgICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgICAgIDxMZWZ0U2lkZSBzdHlsZUNsYXNzTmFtZT1cImNvbnRhY3RVc1wiIC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFjdFVzIHRleHRDb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8Q29udGFjdENvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgICAgICAgIDxDb250YWN0VXMgLz5cbiAgICAgICAgICAgICAgICA8L0NvbnRhY3RDb250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGVcbiAgICAgICAgICAgIHBhdGg9XCIvYWN0aXZhdGVVc2VyLzplbWFpbElkLzphY3RpdmF0aW9uU3RyaW5nXCJcbiAgICAgICAgICAgIGNvbXBvbmVudD17KHByb3BzKSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPE5hdiAvPlxuICAgICAgICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgICAgICAgPEFjdGl2YXRlVXNlclxuICAgICAgICAgICAgICAgICAgZW1haWxJZD17cHJvcHMubWF0Y2g/LnBhcmFtcz8uZW1haWxJZH1cbiAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb25TdHJpbmc9e3Byb3BzLm1hdGNoPy5wYXJhbXM/LmFjdGl2YXRpb25TdHJpbmd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFJvdXRlXG4gICAgICAgICAgICBwYXRoPVwiL3Jlc2V0UGFzc3dvcmQvOmVtYWlsSWQvOnJlc2V0UGFzc3dvcmRTdHJpbmdcIlxuICAgICAgICAgICAgY29tcG9uZW50PXsocHJvcHMpID0+IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8TmF2IC8+XG4gICAgICAgICAgICAgICAgPExvZ28gLz5cbiAgICAgICAgICAgICAgICA8TG9naW5cbiAgICAgICAgICAgICAgICAgIGVtYWlsSWQ9e3Byb3BzLm1hdGNoPy5wYXJhbXM/LmVtYWlsSWR9XG4gICAgICAgICAgICAgICAgICByZXNldFBhc3N3b3JkU3RyaW5nPXtwcm9wcy5tYXRjaD8ucGFyYW1zPy5yZXNldFBhc3N3b3JkU3RyaW5nfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICAgIDwvUm91dGVyPlxuICAgICAgPE1lc3NhZ2UgLz5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwXCI7XG5cbmltcG9ydCB7IExvZ2luQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4vY29udGV4dHMvTG9naW5Db250ZXh0XCI7XG5pbXBvcnQgeyBNZXNzYWdlQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4vY29udGV4dHMvTWVzc2FnZUNvbnRleHRcIjtcblxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwZGl2XCIpO1xud3JhcHBlclxuICA/IFJlYWN0RE9NLnJlbmRlcihcbiAgICAgIDxNZXNzYWdlQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICA8TG9naW5Db250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgPEFwcCAvPlxuICAgICAgICA8L0xvZ2luQ29udGV4dFByb3ZpZGVyPlxuICAgICAgPC9NZXNzYWdlQ29udGV4dFByb3ZpZGVyPixcbiAgICAgIHdyYXBwZXJcbiAgICApXG4gIDogZmFsc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9